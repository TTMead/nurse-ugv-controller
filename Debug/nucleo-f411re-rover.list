
nucleo-f411re-rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f8  080064f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006500  08006500  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c84  20000078  08006580  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004cfc  08006580  00024cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e333  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cda  00000000  00000000  0003e3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000420b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  00043558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a427  00000000  00000000  00044890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001815c  00000000  00000000  0005ecb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af66  00000000  00000000  00076e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000591c  00000000  00000000  00111dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062ec 	.word	0x080062ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080062ec 	.word	0x080062ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_ZL3runv>:
#include "blinksetter.hpp"
#include "eORB.hpp"

blink_t msg;

static void run() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	msg.timestamp = 1;
 800057c:	4913      	ldr	r1, [pc, #76]	; (80005cc <_ZL3runv+0x54>)
 800057e:	f04f 0201 	mov.w	r2, #1
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	e9c1 2300 	strd	r2, r3, [r1]
	msg.frequency = 50;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_ZL3runv+0x54>)
 800058c:	2232      	movs	r2, #50	; 0x32
 800058e:	609a      	str	r2, [r3, #8]
	publish(TOPIC_BLINK, &msg);
 8000590:	490e      	ldr	r1, [pc, #56]	; (80005cc <_ZL3runv+0x54>)
 8000592:	2001      	movs	r0, #1
 8000594:	f000 f9b4 	bl	8000900 <_Z7publishiPv>
	osDelay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f002 fb30 	bl	8002c00 <osDelay>

	msg.timestamp = 1;
 80005a0:	490a      	ldr	r1, [pc, #40]	; (80005cc <_ZL3runv+0x54>)
 80005a2:	f04f 0201 	mov.w	r2, #1
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	e9c1 2300 	strd	r2, r3, [r1]
	msg.frequency = 300;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_ZL3runv+0x54>)
 80005b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005b4:	609a      	str	r2, [r3, #8]
	publish(TOPIC_BLINK, &msg);
 80005b6:	4905      	ldr	r1, [pc, #20]	; (80005cc <_ZL3runv+0x54>)
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 f9a1 	bl	8000900 <_Z7publishiPv>
	osDelay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c2:	f002 fb1d 	bl	8002c00 <osDelay>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000098 	.word	0x20000098

080005d0 <_Z16StartBlinkSetterPv>:


void StartBlinkSetter(void *argument) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		run();
 80005d8:	f7ff ffce 	bl	8000578 <_ZL3runv>
 80005dc:	e7fc      	b.n	80005d8 <_Z16StartBlinkSetterPv+0x8>
	...

080005e0 <_ZL3runv>:
#include "eORB.hpp"

int blink_sub;
int freq;

static void run() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// If blink sub has new data
	if (check(blink_sub)) {
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <_ZL3runv+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f9b3 	bl	8000954 <_Z5checki>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d005      	beq.n	800060a <_ZL3runv+0x2a>
		// Store the new freq
		copy(blink_sub, &freq);
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_ZL3runv+0x40>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4908      	ldr	r1, [pc, #32]	; (8000624 <_ZL3runv+0x44>)
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f9bd 	bl	8000984 <_Z4copyiPv>
	}

	// Toggle the pin at the given frequency
	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 800060a:	2120      	movs	r1, #32
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <_ZL3runv+0x48>)
 800060e:	f000 ff48 	bl	80014a2 <HAL_GPIO_TogglePin>
	osDelay(freq);
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <_ZL3runv+0x44>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f002 faf2 	bl	8002c00 <osDelay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000a8 	.word	0x200000a8
 8000624:	200000ac 	.word	0x200000ac
 8000628:	40020000 	.word	0x40020000

0800062c <_Z11StartBlinkyPv>:


void StartBlinky(void *argument) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	blink_sub = subscribe(TOPIC_BLINK);
 8000634:	2001      	movs	r0, #1
 8000636:	f000 f939 	bl	80008ac <_Z9subscribei>
 800063a:	4603      	mov	r3, r0
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <_Z11StartBlinkyPv+0x24>)
 800063e:	6013      	str	r3, [r2, #0]
	freq = 1000;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <_Z11StartBlinkyPv+0x28>)
 8000642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000646:	601a      	str	r2, [r3, #0]

	for (;;)
	{
		run();
 8000648:	f7ff ffca 	bl	80005e0 <_ZL3runv>
 800064c:	e7fc      	b.n	8000648 <_Z11StartBlinkyPv+0x1c>
 800064e:	bf00      	nop
 8000650:	200000a8 	.word	0x200000a8
 8000654:	200000ac 	.word	0x200000ac

08000658 <_Z11ROVER_PRINTPKcz>:
static char str[MAX_STRING_LENGTH];



void ROVER_PRINT (const char *p_string, ...)
{
 8000658:	b40f      	push	{r0, r1, r2, r3}
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
	va_list arg;
	int formatted_length;



	va_start (arg, p_string);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	603b      	str	r3, [r7, #0]

	// Format the string
	formatted_length = vsprintf(str, p_string, arg);
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	6939      	ldr	r1, [r7, #16]
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <_Z11ROVER_PRINTPKcz+0x48>)
 800066c:	f005 fa34 	bl	8005ad8 <vsiprintf>
 8000670:	6078      	str	r0, [r7, #4]

	// Check if exceeds max length;
	if (formatted_length > MAX_STRING_LENGTH) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b96      	cmp	r3, #150	; 0x96
 8000676:	dd03      	ble.n	8000680 <_Z11ROVER_PRINTPKcz+0x28>
		ROVER_PRINT("\n\rERROR: MAX STRING LENGTH EXCEEDED. INCREASE MAX STRING LENGTH OR BREAK UP PRINT STATEMENTS\n\r");
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <_Z11ROVER_PRINTPKcz+0x4c>)
 800067a:	f7ff ffed 	bl	8000658 <_Z11ROVER_PRINTPKcz>
		return;
 800067e:	e008      	b.n	8000692 <_Z11ROVER_PRINTPKcz+0x3a>
	}

	// Send the string across UART channel
	HAL_UART_Transmit(serial_uart_handle, (uint8_t*) str, formatted_length, TX_TIMEOUT);
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <_Z11ROVER_PRINTPKcz+0x50>)
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	b29a      	uxth	r2, r3
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	4905      	ldr	r1, [pc, #20]	; (80006a0 <_Z11ROVER_PRINTPKcz+0x48>)
 800068c:	f001 fe97 	bl	80023be <HAL_UART_Transmit>


	va_end (arg);

	return;
 8000690:	bf00      	nop
}
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800069a:	b004      	add	sp, #16
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200000b0 	.word	0x200000b0
 80006a4:	08006304 	.word	0x08006304
 80006a8:	20004c10 	.word	0x20004c10

080006ac <_Z13ROVER_PRINTLNPKcz>:


void ROVER_PRINTLN(const char *p_string, ...)
{
 80006ac:	b40f      	push	{r0, r1, r2, r3}
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
	va_list arg;
	int formatted_length;



	va_start (arg, p_string);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	603b      	str	r3, [r7, #0]

	// Format the string
	formatted_length = vsprintf(str, p_string, arg);
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	6939      	ldr	r1, [r7, #16]
 80006be:	4813      	ldr	r0, [pc, #76]	; (800070c <_Z13ROVER_PRINTLNPKcz+0x60>)
 80006c0:	f005 fa0a 	bl	8005ad8 <vsiprintf>
 80006c4:	6078      	str	r0, [r7, #4]

	// Add newline and cr
	str[formatted_length] = '\n';
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <_Z13ROVER_PRINTLNPKcz+0x60>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	220a      	movs	r2, #10
 80006ce:	701a      	strb	r2, [r3, #0]
	str[formatted_length+1] = '\r';
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <_Z13ROVER_PRINTLNPKcz+0x60>)
 80006d6:	210d      	movs	r1, #13
 80006d8:	54d1      	strb	r1, [r2, r3]


	// Check if exceeds max length;
	if (formatted_length+2 > MAX_STRING_LENGTH) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b94      	cmp	r3, #148	; 0x94
 80006de:	dd03      	ble.n	80006e8 <_Z13ROVER_PRINTLNPKcz+0x3c>
		ROVER_PRINT("\n\rERROR: MAX STRING LENGTH EXCEEDED. INCREASE MAX STRING LENGTH OR BREAK UP PRINT STATEMENTS\n\r");
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <_Z13ROVER_PRINTLNPKcz+0x64>)
 80006e2:	f7ff ffb9 	bl	8000658 <_Z11ROVER_PRINTPKcz>
		return;
 80006e6:	e00a      	b.n	80006fe <_Z13ROVER_PRINTLNPKcz+0x52>
	}



	// Send the string across UART channel
	HAL_UART_Transmit(serial_uart_handle, (uint8_t*) str, formatted_length+2, TX_TIMEOUT);
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <_Z13ROVER_PRINTLNPKcz+0x68>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	3302      	adds	r3, #2
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	4905      	ldr	r1, [pc, #20]	; (800070c <_Z13ROVER_PRINTLNPKcz+0x60>)
 80006f8:	f001 fe61 	bl	80023be <HAL_UART_Transmit>

	va_end (arg);

	return;
 80006fc:	bf00      	nop
}
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000706:	b004      	add	sp, #16
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200000b0 	.word	0x200000b0
 8000710:	08006304 	.word	0x08006304
 8000714:	20004c10 	.word	0x20004c10

08000718 <_ZL3runv>:
static uint16_t task_stack_size[NUMBER_OF_TASKS];
static uint8_t task_counter = 1;


static void run()
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
	#ifdef DISPLAY_MEMORY_USAGE
	ROVER_PRINTLN("================");
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <_ZL3runv+0x80>)
 8000720:	f7ff ffc4 	bl	80006ac <_Z13ROVER_PRINTLNPKcz>
	ROVER_PRINTLN("Memory Usage");
 8000724:	481d      	ldr	r0, [pc, #116]	; (800079c <_ZL3runv+0x84>)
 8000726:	f7ff ffc1 	bl	80006ac <_Z13ROVER_PRINTLNPKcz>
	ROVER_PRINTLN("================");
 800072a:	481b      	ldr	r0, [pc, #108]	; (8000798 <_ZL3runv+0x80>)
 800072c:	f7ff ffbe 	bl	80006ac <_Z13ROVER_PRINTLNPKcz>
	for (int i = 0; i < NUMBER_OF_TASKS; i++) {
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b03      	cmp	r3, #3
 8000738:	dc22      	bgt.n	8000780 <_ZL3runv+0x68>
		ROVER_PRINT(osThreadGetName(task_handles[i]));
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <_ZL3runv+0x88>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fa24 	bl	8002b90 <osThreadGetName>
 8000748:	4603      	mov	r3, r0
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff84 	bl	8000658 <_Z11ROVER_PRINTPKcz>
		ROVER_PRINTLN(" heap: %u/%u bytes in use", task_stack_size[i] - osThreadGetStackSpace(task_handles[0]), task_stack_size[i]);
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <_ZL3runv+0x8c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	461c      	mov	r4, r3
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <_ZL3runv+0x88>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fa31 	bl	8002bc6 <osThreadGetStackSpace>
 8000764:	4603      	mov	r3, r0
 8000766:	1ae1      	subs	r1, r4, r3
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <_ZL3runv+0x8c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000770:	461a      	mov	r2, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <_ZL3runv+0x90>)
 8000774:	f7ff ff9a 	bl	80006ac <_Z13ROVER_PRINTLNPKcz>
	for (int i = 0; i < NUMBER_OF_TASKS; i++) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e7d9      	b.n	8000734 <_ZL3runv+0x1c>
	}
	ROVER_PRINTLN("");
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <_ZL3runv+0x94>)
 8000782:	f7ff ff93 	bl	80006ac <_Z13ROVER_PRINTLNPKcz>
	#endif

	osDelay(1000);
 8000786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078a:	f002 fa39 	bl	8002c00 <osDelay>
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	bf00      	nop
 8000798:	08006384 	.word	0x08006384
 800079c:	08006398 	.word	0x08006398
 80007a0:	20000148 	.word	0x20000148
 80007a4:	20000158 	.word	0x20000158
 80007a8:	080063a8 	.word	0x080063a8
 80007ac:	080063c4 	.word	0x080063c4

080007b0 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t>:


static void InitialiseTask(osThreadFunc_t start_function, const osThreadAttr_t *thread_attributes)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	task_handles[task_counter] = osThreadNew(start_function, NULL, thread_attributes);
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t+0x48>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461c      	mov	r4, r3
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	2100      	movs	r1, #0
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f002 f951 	bl	8002a6c <osThreadNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t+0x4c>)
 80007ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	task_stack_size[task_counter] = thread_attributes->stack_size;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	6959      	ldr	r1, [r3, #20]
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t+0x48>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	b289      	uxth	r1, r1
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t+0x50>)
 80007e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	task_counter ++;
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t+0x48>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t+0x48>)
 80007ee:	701a      	strb	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000148 	.word	0x20000148
 8000800:	20000158 	.word	0x20000158

08000804 <StartTaskManager>:


void StartTaskManager(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	// Add the task manager stack size
	task_stack_size[0] = TASK_MANAGER_STACK_SIZE;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <StartTaskManager+0x30>)
 800080e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000812:	801a      	strh	r2, [r3, #0]

	// Initialise other tasks
	InitialiseTask(StarteORB, &eORB_attributes);
 8000814:	4908      	ldr	r1, [pc, #32]	; (8000838 <StartTaskManager+0x34>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <StartTaskManager+0x38>)
 8000818:	f7ff ffca 	bl	80007b0 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t>
	InitialiseTask(StartBlinkSetter, &BlinkSetter_attributes);
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <StartTaskManager+0x3c>)
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <StartTaskManager+0x40>)
 8000820:	f7ff ffc6 	bl	80007b0 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t>
	InitialiseTask(StartBlinky, &Blinky_attributes);
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <StartTaskManager+0x44>)
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <StartTaskManager+0x48>)
 8000828:	f7ff ffc2 	bl	80007b0 <_ZL14InitialiseTaskPFvPvEPK14osThreadAttr_t>

	for (;;)
	{
		run();
 800082c:	f7ff ff74 	bl	8000718 <_ZL3runv>
 8000830:	e7fc      	b.n	800082c <StartTaskManager+0x28>
 8000832:	bf00      	nop
 8000834:	20000158 	.word	0x20000158
 8000838:	08006440 	.word	0x08006440
 800083c:	08000851 	.word	0x08000851
 8000840:	0800641c 	.word	0x0800641c
 8000844:	080005d1 	.word	0x080005d1
 8000848:	080063f8 	.word	0x080063f8
 800084c:	0800062d 	.word	0x0800062d

08000850 <_Z9StarteORBPv>:
/* Bins to store each fifo data stream */
static osMessageQId bin_handles[number_of_bins];
static int bin_topics[number_of_bins];

void StarteORB(void* ignore)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    subscriberCount = 0;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <_Z9StarteORBPv+0x14>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]

    for(;;)
    {
    	run();
 800085e:	f000 f803 	bl	8000868 <_ZL3runv>
 8000862:	e7fc      	b.n	800085e <_Z9StarteORBPv+0xe>
 8000864:	20000160 	.word	0x20000160

08000868 <_ZL3runv>:
    osThreadTerminate(NULL);
}


static void run()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	osDelay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f002 f9c6 	bl	8002c00 <osDelay>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <_ZL17get_size_of_topici>:
 * Returns the msg packet size for a given topic
 *
 * @param none
 * @return int the sizeof the struct corresponding to the given topic
 */
static int get_size_of_topic(int topic) {
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    int size = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
    switch (topic) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <_ZL17get_size_of_topici+0x1a>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d003      	beq.n	8000898 <_ZL17get_size_of_topici+0x20>
 8000890:	e005      	b.n	800089e <_ZL17get_size_of_topici+0x26>
        case TOPIC_HEARTBEAT:
            size = sizeof(heartbeat_t);
 8000892:	2308      	movs	r3, #8
 8000894:	60fb      	str	r3, [r7, #12]
            break;
 8000896:	e002      	b.n	800089e <_ZL17get_size_of_topici+0x26>
        case TOPIC_BLINK:
            size = sizeof(blink_t);
 8000898:	2310      	movs	r3, #16
 800089a:	60fb      	str	r3, [r7, #12]
            break;
 800089c:	bf00      	nop
    }


    return size;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <_Z9subscribei>:



int subscribe(int topic) {
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    subscriberCount += 1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <_Z9subscribei+0x48>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <_Z9subscribei+0x48>)
 80008bc:	6013      	str	r3, [r2, #0]

    bin_topics[subscriberCount] = topic;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <_Z9subscribei+0x48>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <_Z9subscribei+0x4c>)
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    bin_handles[subscriberCount] = osMessageQueueNew(msg_queue_len, get_size_of_topic(topic), NULL);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffd4 	bl	8000878 <_ZL17get_size_of_topici>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <_Z9subscribei+0x48>)
 80008d6:	681c      	ldr	r4, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	2005      	movs	r0, #5
 80008dc:	f002 f9ab 	bl	8002c36 <osMessageQueueNew>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <_Z9subscribei+0x50>)
 80008e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    return subscriberCount;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <_Z9subscribei+0x48>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000160 	.word	0x20000160
 80008f8:	2000022c 	.word	0x2000022c
 80008fc:	20000164 	.word	0x20000164

08000900 <_Z7publishiPv>:


void publish(int topic, void* data) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]

    // For each subscriber queue
    for (int i = 0; i < subscriberCount; i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_Z7publishiPv+0x48>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	da13      	bge.n	8000940 <_Z7publishiPv+0x40>

        // If this subscriber queue matches this topic
        if (bin_topics[i] == topic) {
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <_Z7publishiPv+0x4c>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	d108      	bne.n	8000938 <_Z7publishiPv+0x38>
            // Add the data to queue
        	osMessageQueuePut(bin_handles[i], data, 0U, 0U);
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <_Z7publishiPv+0x50>)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	6839      	ldr	r1, [r7, #0]
 8000934:	f002 f9f2 	bl	8002d1c <osMessageQueuePut>
    for (int i = 0; i < subscriberCount; i++) {
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e7e6      	b.n	800090e <_Z7publishiPv+0xe>
        }
    }
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000160 	.word	0x20000160
 800094c:	2000022c 	.word	0x2000022c
 8000950:	20000164 	.word	0x20000164

08000954 <_Z5checki>:



int check(int subscriberID) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	// Check the number if there is atleast one new message in this subscription
	return osMessageQueueGetCount(bin_handles[subscriberID]) > 0;
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <_Z5checki+0x2c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fa97 	bl	8002e98 <osMessageQueueGetCount>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	bf14      	ite	ne
 8000970:	2301      	movne	r3, #1
 8000972:	2300      	moveq	r3, #0
 8000974:	b2db      	uxtb	r3, r3
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000164 	.word	0x20000164

08000984 <_Z4copyiPv>:



int copy(int subscriberID, void* data) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	// Copy the message of this subscriber into the data pointer
    return osMessageQueueGet(bin_handles[subscriberID], data, NULL, 0);
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <_Z4copyiPv+0x28>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	6839      	ldr	r1, [r7, #0]
 800099c:	f002 fa1e 	bl	8002ddc <osMessageQueueGet>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000164 	.word	0x20000164

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fab4 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f832 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 f8c4 	bl	8000b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c0:	f000 f898 	bl	8000af4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Give a pointer to the uart handle to the serial module
  serial_uart_handle = &huart2;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <main+0x4c>)
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <main+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ca:	f002 f805 	bl	80029d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IdleTask */
  IdleTaskHandle = osThreadNew(StartIdleTask, NULL, &IdleTask_attributes);
 80009ce:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <main+0x54>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0x58>)
 80009d4:	f002 f84a 	bl	8002a6c <osThreadNew>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <main+0x5c>)
 80009dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  TaskManagerHandle = osThreadNew(StartTaskManager, NULL, &TaskManager_attributes);
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <main+0x60>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <main+0x64>)
 80009e4:	f002 f842 	bl	8002a6c <osThreadNew>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <main+0x68>)
 80009ec:	6013      	str	r3, [r2, #0]
  task_handles[0] = TaskManagerHandle;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <main+0x68>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <main+0x6c>)
 80009f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009f6:	f002 f813 	bl	8002a20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0x4a>
 80009fc:	20004c10 	.word	0x20004c10
 8000a00:	20004c1c 	.word	0x20004c1c
 8000a04:	08006464 	.word	0x08006464
 8000a08:	08000c25 	.word	0x08000c25
 8000a0c:	20004c14 	.word	0x20004c14
 8000a10:	08006488 	.word	0x08006488
 8000a14:	08000805 	.word	0x08000805
 8000a18:	20004c18 	.word	0x20004c18
 8000a1c:	20000148 	.word	0x20000148

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 f834 	bl	8005a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2310      	movs	r3, #16
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a90:	2310      	movs	r3, #16
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fd16 	bl	80014d8 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f8d1 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2302      	movs	r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 ff78 	bl	80019c8 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ade:	f000 f8bb 	bl	8000c58 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f001 fbfa 	bl	8002324 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f88f 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20004c1c 	.word	0x20004c1c
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000bd4:	f000 fc4c 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_GPIO_Init+0xd8>)
 8000bf0:	f000 faba 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000c0c:	f000 faac 	bl	8001168 <HAL_GPIO_Init>

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020800 	.word	0x40020800

08000c24 <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void *argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f001 ffe7 	bl	8002c00 <osDelay>
 8000c32:	e7fb      	b.n	8000c2c <StartIdleTask+0x8>

08000c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c46:	f000 f98d 	bl	8000f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010000 	.word	0x40010000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f000 fa33 	bl	8001114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d32:	f000 fa19 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2019      	movs	r0, #25
 8000d62:	f000 f9d7 	bl	8001114 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d66:	2019      	movs	r0, #25
 8000d68:	f000 f9f0 	bl	800114c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HAL_InitTick+0xa0>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_InitTick+0xa0>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_InitTick+0xa0>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d88:	f107 0210 	add.w	r2, r7, #16
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f814 	bl	8001dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d98:	f000 fffe 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8000d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_InitTick+0xa4>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_InitTick+0xac>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_InitTick+0xa8>)
 8000db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dce:	f001 f829 	bl	8001e24 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_InitTick+0xa8>)
 8000dda:	f001 f87d 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20004c60 	.word	0x20004c60
 8000df8:	40010000 	.word	0x40010000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e2e:	f001 f8b5 	bl	8001f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20004c60 	.word	0x20004c60

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f004 fdde 	bl	8005a2c <__errno>
 8000e70:	4603      	mov	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20020000 	.word	0x20020000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	200002f4 	.word	0x200002f4
 8000ea4:	20004d00 	.word	0x20004d00

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee8:	4c0b      	ldr	r4, [pc, #44]	; (8000f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef6:	f7ff ffd7 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f004 fd9d 	bl	8005a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fd57 	bl	80009b0 <main>
  bx  lr    
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f10:	08006508 	.word	0x08006508
  ldr r2, =_sbss
 8000f14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f18:	20004cfc 	.word	0x20004cfc

08000f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_Init+0x40>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_Init+0x40>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x40>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f8d8 	bl	80010fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	200f      	movs	r0, #15
 8000f50:	f7ff fefc 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fe86 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023c00 	.word	0x40023c00

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	20004ca8 	.word	0x20004ca8

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20004ca8 	.word	0x20004ca8

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff4c 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001126:	f7ff ff61 	bl	8000fec <__NVIC_GetPriorityGrouping>
 800112a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f7ff ffb1 	bl	8001098 <NVIC_EncodePriority>
 8001136:	4602      	mov	r2, r0
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff80 	bl	8001044 <__NVIC_SetPriority>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff54 	bl	8001008 <__NVIC_EnableIRQ>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e159      	b.n	8001438 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8148 	bne.w	8001432 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80a2 	beq.w	8001432 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a56      	ldr	r2, [pc, #344]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_GPIO_Init+0x2ec>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a49      	ldr	r2, [pc, #292]	; (8001458 <HAL_GPIO_Init+0x2f0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x202>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a48      	ldr	r2, [pc, #288]	; (800145c <HAL_GPIO_Init+0x2f4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x1fe>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a47      	ldr	r2, [pc, #284]	; (8001460 <HAL_GPIO_Init+0x2f8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a46      	ldr	r2, [pc, #280]	; (8001464 <HAL_GPIO_Init+0x2fc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x1f6>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a45      	ldr	r2, [pc, #276]	; (8001468 <HAL_GPIO_Init+0x300>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x1f2>
 8001356:	2304      	movs	r3, #4
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x204>
 800135a:	2307      	movs	r3, #7
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x204>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x204>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x204>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x204>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x2ec>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_GPIO_Init+0x304>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_GPIO_Init+0x304>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_GPIO_Init+0x304>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_GPIO_Init+0x304>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_GPIO_Init+0x304>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_GPIO_Init+0x304>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_GPIO_Init+0x304>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_GPIO_Init+0x304>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f aea2 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43d9      	mvns	r1, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e264      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d075      	beq.n	80015e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f6:	4ba3      	ldr	r3, [pc, #652]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d00c      	beq.n	800151c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4ba0      	ldr	r3, [pc, #640]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	2b08      	cmp	r3, #8
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4b9d      	ldr	r3, [pc, #628]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800151a:	d10b      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4b99      	ldr	r3, [pc, #612]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x108>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e23f      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x74>
 800153e:	4b91      	ldr	r3, [pc, #580]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a90      	ldr	r2, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b8b      	ldr	r3, [pc, #556]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a8a      	ldr	r2, [pc, #552]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b88      	ldr	r3, [pc, #544]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a87      	ldr	r2, [pc, #540]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 8001570:	4b84      	ldr	r3, [pc, #528]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a83      	ldr	r2, [pc, #524]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b81      	ldr	r3, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a80      	ldr	r2, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fcfc 	bl	8000f8c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fcf8 	bl	8000f8c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e204      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xc0>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fce8 	bl	8000f8c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fce4 	bl	8000f8c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1f0      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b6c      	ldr	r3, [pc, #432]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0xe8>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ee:	4b65      	ldr	r3, [pc, #404]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b62      	ldr	r3, [pc, #392]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001602:	2b08      	cmp	r3, #8
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001606:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d116      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e1c4      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4952      	ldr	r1, [pc, #328]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	e03a      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001648:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <HAL_RCC_OscConfig+0x2b0>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fc9d 	bl	8000f8c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fc99 	bl	8000f8c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1a5      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4940      	ldr	r1, [pc, #256]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCC_OscConfig+0x2b0>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fc7c 	bl	8000f8c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fc78 	bl	8000f8c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e184      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	4b36      	ldr	r3, [pc, #216]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d030      	beq.n	8001724 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d016      	beq.n	80016f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fc5c 	bl	8000f8c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc58 	bl	8000f8c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e164      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x200>
 80016f6:	e015      	b.n	8001724 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fc45 	bl	8000f8c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fc41 	bl	8000f8c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e14d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a0 	beq.w	8001872 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d121      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fc07 	bl	8000f8c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e011      	b.n	80017a6 <HAL_RCC_OscConfig+0x2ce>
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	42470000 	.word	0x42470000
 800178c:	42470e80 	.word	0x42470e80
 8001790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff fbfa 	bl	8000f8c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e106      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b85      	ldr	r3, [pc, #532]	; (80019bc <HAL_RCC_OscConfig+0x4e4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
 80017ba:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a80      	ldr	r2, [pc, #512]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	e01c      	b.n	8001802 <HAL_RCC_OscConfig+0x32a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x312>
 80017d0:	4b7b      	ldr	r3, [pc, #492]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a7a      	ldr	r2, [pc, #488]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	4a77      	ldr	r2, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	; 0x70
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0x32a>
 80017ea:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a74      	ldr	r2, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a71      	ldr	r2, [pc, #452]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fbbf 	bl	8000f8c <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fbbb 	bl	8000f8c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0c5      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ee      	beq.n	8001812 <HAL_RCC_OscConfig+0x33a>
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fba9 	bl	8000f8c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fba5 	bl	8000f8c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0af      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a55      	ldr	r2, [pc, #340]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 809b 	beq.w	80019b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d05c      	beq.n	8001942 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d141      	bne.n	8001914 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x4ec>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fb79 	bl	8000f8c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fb75 	bl	8000f8c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e081      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	3b01      	subs	r3, #1
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	061b      	lsls	r3, r3, #24
 80018e0:	4937      	ldr	r1, [pc, #220]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_OscConfig+0x4ec>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb4e 	bl	8000f8c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fb4a 	bl	8000f8c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e056      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x41c>
 8001912:	e04e      	b.n	80019b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_OscConfig+0x4ec>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb37 	bl	8000f8c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fb33 	bl	8000f8c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e03f      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x44a>
 8001940:	e037      	b.n	80019b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e032      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_RCC_OscConfig+0x4e8>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d028      	beq.n	80019ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d121      	bne.n	80019ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d11a      	bne.n	80019ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800197e:	4013      	ands	r3, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001984:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001986:	4293      	cmp	r3, r2
 8001988:	d111      	bne.n	80019ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40007000 	.word	0x40007000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	42470060 	.word	0x42470060

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0cc      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d90c      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	494d      	ldr	r1, [pc, #308]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d044      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d119      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e067      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff fa68 	bl	8000f8c <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff fa64 	bl	8000f8c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e04f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d20c      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4916      	ldr	r1, [pc, #88]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4e:	f000 f821 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490a      	ldr	r1, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f8ec 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	080064ac 	.word	0x080064ac
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bac:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	f200 80bd 	bhi.w	8001d38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc6:	e0b7      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bca:	60bb      	str	r3, [r7, #8]
       break;
 8001bcc:	e0b7      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bd0:	60bb      	str	r3, [r7, #8]
      break;
 8001bd2:	e0b4      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd4:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bde:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d04d      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bea:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	099b      	lsrs	r3, r3, #6
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	ea02 0800 	and.w	r8, r2, r0
 8001c02:	ea03 0901 	and.w	r9, r3, r1
 8001c06:	4640      	mov	r0, r8
 8001c08:	4649      	mov	r1, r9
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	014b      	lsls	r3, r1, #5
 8001c14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c18:	0142      	lsls	r2, r0, #5
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	ebb0 0008 	subs.w	r0, r0, r8
 8001c22:	eb61 0109 	sbc.w	r1, r1, r9
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	018b      	lsls	r3, r1, #6
 8001c30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c34:	0182      	lsls	r2, r0, #6
 8001c36:	1a12      	subs	r2, r2, r0
 8001c38:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	00d9      	lsls	r1, r3, #3
 8001c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c4a:	00d0      	lsls	r0, r2, #3
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	eb12 0208 	adds.w	r2, r2, r8
 8001c54:	eb43 0309 	adc.w	r3, r3, r9
 8001c58:	f04f 0000 	mov.w	r0, #0
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	0259      	lsls	r1, r3, #9
 8001c62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c66:	0250      	lsls	r0, r2, #9
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	f7fe fb02 	bl	8000280 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e04a      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	ea02 0400 	and.w	r4, r2, r0
 8001c9e:	ea03 0501 	and.w	r5, r3, r1
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	014b      	lsls	r3, r1, #5
 8001cb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb4:	0142      	lsls	r2, r0, #5
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	1b00      	subs	r0, r0, r4
 8001cbc:	eb61 0105 	sbc.w	r1, r1, r5
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	018b      	lsls	r3, r1, #6
 8001cca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cce:	0182      	lsls	r2, r0, #6
 8001cd0:	1a12      	subs	r2, r2, r0
 8001cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	00d9      	lsls	r1, r3, #3
 8001ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ce4:	00d0      	lsls	r0, r2, #3
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	1912      	adds	r2, r2, r4
 8001cec:	eb45 0303 	adc.w	r3, r5, r3
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0299      	lsls	r1, r3, #10
 8001cfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cfe:	0290      	lsls	r0, r2, #10
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	f7fe fab6 	bl	8000280 <__aeabi_uldivmod>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	60bb      	str	r3, [r7, #8]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d3a:	60bb      	str	r3, [r7, #8]
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	00f42400 	.word	0x00f42400
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0a9b      	lsrs	r3, r3, #10
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	080064bc 	.word	0x080064bc

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d9c:	f7ff ffdc 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0b5b      	lsrs	r3, r3, #13
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4903      	ldr	r1, [pc, #12]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	080064bc 	.word	0x080064bc

08001dc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	220f      	movs	r2, #15
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCC_GetClockConfig+0x60>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0207 	and.w	r2, r3, #7
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e041      	b.n	8001eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f839 	bl	8001ec2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 f9ca 	bl	80021fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e044      	b.n	8001f7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x6c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d013      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x6c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <HAL_TIM_Base_Start_IT+0xb4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x6c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x6c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x6c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d010      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	e007      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40014000 	.word	0x40014000

08001f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8ee 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8e0 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f8f1 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d122      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0204 	mvn.w	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8c4 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8b6 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8c7 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f89a 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f88c 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f89d 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2208      	movs	r2, #8
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f870 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f862 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f873 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0201 	mvn.w	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fd8a 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8e2 	bl	8002310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f838 	bl	80021e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0220 	mvn.w	r2, #32
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8ac 	bl	80022fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <TIM_Base_SetConfig+0xe4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00f      	beq.n	8002234 <TIM_Base_SetConfig+0x38>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221a:	d00b      	beq.n	8002234 <TIM_Base_SetConfig+0x38>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <TIM_Base_SetConfig+0xe8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <TIM_Base_SetConfig+0x38>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a30      	ldr	r2, [pc, #192]	; (80022e8 <TIM_Base_SetConfig+0xec>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <TIM_Base_SetConfig+0x38>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <TIM_Base_SetConfig+0xf0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d108      	bne.n	8002246 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <TIM_Base_SetConfig+0xe4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01b      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d017      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <TIM_Base_SetConfig+0xe8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <TIM_Base_SetConfig+0xec>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00f      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a20      	ldr	r2, [pc, #128]	; (80022ec <TIM_Base_SetConfig+0xf0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <TIM_Base_SetConfig+0xf4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <TIM_Base_SetConfig+0xf8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x8a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <TIM_Base_SetConfig+0xfc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <TIM_Base_SetConfig+0xe4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d103      	bne.n	80022cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	615a      	str	r2, [r3, #20]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40000c00 	.word	0x40000c00
 80022f0:	40014000 	.word	0x40014000
 80022f4:	40014400 	.word	0x40014400
 80022f8:	40014800 	.word	0x40014800

080022fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e03f      	b.n	80023b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fcb6 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f929 	bl	80025c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800237c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800238c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b08a      	sub	sp, #40	; 0x28
 80023c2:	af02      	add	r7, sp, #8
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d17c      	bne.n	80024d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_UART_Transmit+0x2c>
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e075      	b.n	80024da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Transmit+0x3e>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e06e      	b.n	80024da <HAL_UART_Transmit+0x11c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002412:	f7fe fdbb 	bl	8000f8c <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242c:	d108      	bne.n	8002440 <HAL_UART_Transmit+0x82>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e003      	b.n	8002448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002450:	e02a      	b.n	80024a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f840 	bl	80024e2 <UART_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e036      	b.n	80024da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3302      	adds	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e007      	b.n	800249a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3301      	adds	r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1cf      	bne.n	8002452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f810 	bl	80024e2 <UART_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e006      	b.n	80024da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b090      	sub	sp, #64	; 0x40
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f2:	e050      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d04c      	beq.n	8002596 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <UART_WaitOnFlagUntilTimeout+0x30>
 8002502:	f7fe fd43 	bl	8000f8c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800250e:	429a      	cmp	r2, r3
 8002510:	d241      	bcs.n	8002596 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	e853 3f00 	ldrex	r3, [r3]
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002532:	637a      	str	r2, [r7, #52]	; 0x34
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e5      	bne.n	8002512 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3314      	adds	r3, #20
 800254c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	613b      	str	r3, [r7, #16]
   return(result);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002566:	623a      	str	r2, [r7, #32]
 8002568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	61bb      	str	r3, [r7, #24]
   return(result);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e5      	bne.n	8002546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e00f      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d09f      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3740      	adds	r7, #64	; 0x40
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c4:	b09f      	sub	sp, #124	; 0x7c
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	68d9      	ldr	r1, [r3, #12]
 80025d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	ea40 0301 	orr.w	r3, r0, r1
 80025e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002604:	f021 010c 	bic.w	r1, r1, #12
 8002608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	6999      	ldr	r1, [r3, #24]
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	ea40 0301 	orr.w	r3, r0, r1
 8002628:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800262a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4bc5      	ldr	r3, [pc, #788]	; (8002944 <UART_SetConfig+0x384>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d004      	beq.n	800263e <UART_SetConfig+0x7e>
 8002634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4bc3      	ldr	r3, [pc, #780]	; (8002948 <UART_SetConfig+0x388>)
 800263a:	429a      	cmp	r2, r3
 800263c:	d103      	bne.n	8002646 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800263e:	f7ff fbab 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8002642:	6778      	str	r0, [r7, #116]	; 0x74
 8002644:	e002      	b.n	800264c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002646:	f7ff fb93 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 800264a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002654:	f040 80b6 	bne.w	80027c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265a:	461c      	mov	r4, r3
 800265c:	f04f 0500 	mov.w	r5, #0
 8002660:	4622      	mov	r2, r4
 8002662:	462b      	mov	r3, r5
 8002664:	1891      	adds	r1, r2, r2
 8002666:	6439      	str	r1, [r7, #64]	; 0x40
 8002668:	415b      	adcs	r3, r3
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
 800266c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002670:	1912      	adds	r2, r2, r4
 8002672:	eb45 0303 	adc.w	r3, r5, r3
 8002676:	f04f 0000 	mov.w	r0, #0
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	00d9      	lsls	r1, r3, #3
 8002680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002684:	00d0      	lsls	r0, r2, #3
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	1911      	adds	r1, r2, r4
 800268c:	6639      	str	r1, [r7, #96]	; 0x60
 800268e:	416b      	adcs	r3, r5
 8002690:	667b      	str	r3, [r7, #100]	; 0x64
 8002692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	1891      	adds	r1, r2, r2
 800269e:	63b9      	str	r1, [r7, #56]	; 0x38
 80026a0:	415b      	adcs	r3, r3
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80026ac:	f7fd fde8 	bl	8000280 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4ba5      	ldr	r3, [pc, #660]	; (800294c <UART_SetConfig+0x38c>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011e      	lsls	r6, r3, #4
 80026be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c0:	461c      	mov	r4, r3
 80026c2:	f04f 0500 	mov.w	r5, #0
 80026c6:	4622      	mov	r2, r4
 80026c8:	462b      	mov	r3, r5
 80026ca:	1891      	adds	r1, r2, r2
 80026cc:	6339      	str	r1, [r7, #48]	; 0x30
 80026ce:	415b      	adcs	r3, r3
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
 80026d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026d6:	1912      	adds	r2, r2, r4
 80026d8:	eb45 0303 	adc.w	r3, r5, r3
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	00d9      	lsls	r1, r3, #3
 80026e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ea:	00d0      	lsls	r0, r2, #3
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	1911      	adds	r1, r2, r4
 80026f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80026f4:	416b      	adcs	r3, r5
 80026f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	1891      	adds	r1, r2, r2
 8002704:	62b9      	str	r1, [r7, #40]	; 0x28
 8002706:	415b      	adcs	r3, r3
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800270e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002712:	f7fd fdb5 	bl	8000280 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4b8c      	ldr	r3, [pc, #560]	; (800294c <UART_SetConfig+0x38c>)
 800271c:	fba3 1302 	umull	r1, r3, r3, r2
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	2164      	movs	r1, #100	; 0x64
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	3332      	adds	r3, #50	; 0x32
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <UART_SetConfig+0x38c>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800273c:	441e      	add	r6, r3
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	4618      	mov	r0, r3
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	1894      	adds	r4, r2, r2
 800274c:	623c      	str	r4, [r7, #32]
 800274e:	415b      	adcs	r3, r3
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002756:	1812      	adds	r2, r2, r0
 8002758:	eb41 0303 	adc.w	r3, r1, r3
 800275c:	f04f 0400 	mov.w	r4, #0
 8002760:	f04f 0500 	mov.w	r5, #0
 8002764:	00dd      	lsls	r5, r3, #3
 8002766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800276a:	00d4      	lsls	r4, r2, #3
 800276c:	4622      	mov	r2, r4
 800276e:	462b      	mov	r3, r5
 8002770:	1814      	adds	r4, r2, r0
 8002772:	653c      	str	r4, [r7, #80]	; 0x50
 8002774:	414b      	adcs	r3, r1
 8002776:	657b      	str	r3, [r7, #84]	; 0x54
 8002778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	461a      	mov	r2, r3
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	1891      	adds	r1, r2, r2
 8002784:	61b9      	str	r1, [r7, #24]
 8002786:	415b      	adcs	r3, r3
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002792:	f7fd fd75 	bl	8000280 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4b6c      	ldr	r3, [pc, #432]	; (800294c <UART_SetConfig+0x38c>)
 800279c:	fba3 1302 	umull	r1, r3, r3, r2
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	2164      	movs	r1, #100	; 0x64
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	3332      	adds	r3, #50	; 0x32
 80027ae:	4a67      	ldr	r2, [pc, #412]	; (800294c <UART_SetConfig+0x38c>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4432      	add	r2, r6
 80027c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027c2:	e0b9      	b.n	8002938 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	461c      	mov	r4, r3
 80027c8:	f04f 0500 	mov.w	r5, #0
 80027cc:	4622      	mov	r2, r4
 80027ce:	462b      	mov	r3, r5
 80027d0:	1891      	adds	r1, r2, r2
 80027d2:	6139      	str	r1, [r7, #16]
 80027d4:	415b      	adcs	r3, r3
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027dc:	1912      	adds	r2, r2, r4
 80027de:	eb45 0303 	adc.w	r3, r5, r3
 80027e2:	f04f 0000 	mov.w	r0, #0
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	00d9      	lsls	r1, r3, #3
 80027ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027f0:	00d0      	lsls	r0, r2, #3
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	eb12 0804 	adds.w	r8, r2, r4
 80027fa:	eb43 0905 	adc.w	r9, r3, r5
 80027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	008b      	lsls	r3, r1, #2
 8002812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002816:	0082      	lsls	r2, r0, #2
 8002818:	4640      	mov	r0, r8
 800281a:	4649      	mov	r1, r9
 800281c:	f7fd fd30 	bl	8000280 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4b49      	ldr	r3, [pc, #292]	; (800294c <UART_SetConfig+0x38c>)
 8002826:	fba3 2302 	umull	r2, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	011e      	lsls	r6, r3, #4
 800282e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002830:	4618      	mov	r0, r3
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	1894      	adds	r4, r2, r2
 800283c:	60bc      	str	r4, [r7, #8]
 800283e:	415b      	adcs	r3, r3
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002846:	1812      	adds	r2, r2, r0
 8002848:	eb41 0303 	adc.w	r3, r1, r3
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	f04f 0500 	mov.w	r5, #0
 8002854:	00dd      	lsls	r5, r3, #3
 8002856:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800285a:	00d4      	lsls	r4, r2, #3
 800285c:	4622      	mov	r2, r4
 800285e:	462b      	mov	r3, r5
 8002860:	1814      	adds	r4, r2, r0
 8002862:	64bc      	str	r4, [r7, #72]	; 0x48
 8002864:	414b      	adcs	r3, r1
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4618      	mov	r0, r3
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	008b      	lsls	r3, r1, #2
 800287c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002880:	0082      	lsls	r2, r0, #2
 8002882:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002886:	f7fd fcfb 	bl	8000280 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4b2f      	ldr	r3, [pc, #188]	; (800294c <UART_SetConfig+0x38c>)
 8002890:	fba3 1302 	umull	r1, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	2164      	movs	r1, #100	; 0x64
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	3332      	adds	r3, #50	; 0x32
 80028a2:	4a2a      	ldr	r2, [pc, #168]	; (800294c <UART_SetConfig+0x38c>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ae:	441e      	add	r6, r3
 80028b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b2:	4618      	mov	r0, r3
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	1894      	adds	r4, r2, r2
 80028be:	603c      	str	r4, [r7, #0]
 80028c0:	415b      	adcs	r3, r3
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c8:	1812      	adds	r2, r2, r0
 80028ca:	eb41 0303 	adc.w	r3, r1, r3
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	f04f 0500 	mov.w	r5, #0
 80028d6:	00dd      	lsls	r5, r3, #3
 80028d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028dc:	00d4      	lsls	r4, r2, #3
 80028de:	4622      	mov	r2, r4
 80028e0:	462b      	mov	r3, r5
 80028e2:	eb12 0a00 	adds.w	sl, r2, r0
 80028e6:	eb43 0b01 	adc.w	fp, r3, r1
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	008b      	lsls	r3, r1, #2
 80028fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002902:	0082      	lsls	r2, r0, #2
 8002904:	4650      	mov	r0, sl
 8002906:	4659      	mov	r1, fp
 8002908:	f7fd fcba 	bl	8000280 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <UART_SetConfig+0x38c>)
 8002912:	fba3 1302 	umull	r1, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2164      	movs	r1, #100	; 0x64
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	3332      	adds	r3, #50	; 0x32
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <UART_SetConfig+0x38c>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4432      	add	r2, r6
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	377c      	adds	r7, #124	; 0x7c
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40011000 	.word	0x40011000
 8002948:	40011400 	.word	0x40011400
 800294c:	51eb851f 	.word	0x51eb851f

08002950 <__NVIC_SetPriority>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SysTick_Handler+0x1c>)
 80029aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029ac:	f001 ffd8 	bl	8004960 <xTaskGetSchedulerState>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029b6:	f002 fdbf 	bl	8005538 <xPortSysTickHandler>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029c8:	2100      	movs	r1, #0
 80029ca:	f06f 0004 	mvn.w	r0, #4
 80029ce:	f7ff ffbf 	bl	8002950 <__NVIC_SetPriority>
#endif
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029de:	f3ef 8305 	mrs	r3, IPSR
 80029e2:	603b      	str	r3, [r7, #0]
  return(result);
 80029e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80029ea:	f06f 0305 	mvn.w	r3, #5
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	e00c      	b.n	8002a0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <osKernelInitialize+0x44>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <osKernelInitialize+0x44>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	e002      	b.n	8002a0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	200002f8 	.word	0x200002f8

08002a20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a26:	f3ef 8305 	mrs	r3, IPSR
 8002a2a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a32:	f06f 0305 	mvn.w	r3, #5
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	e010      	b.n	8002a5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <osKernelStart+0x48>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d109      	bne.n	8002a56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a42:	f7ff ffbf 	bl	80029c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <osKernelStart+0x48>)
 8002a48:	2202      	movs	r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a4c:	f001 fae4 	bl	8004018 <vTaskStartScheduler>
      stat = osOK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	e002      	b.n	8002a5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200002f8 	.word	0x200002f8

08002a6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a7c:	f3ef 8305 	mrs	r3, IPSR
 8002a80:	617b      	str	r3, [r7, #20]
  return(result);
 8002a82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d17e      	bne.n	8002b86 <osThreadNew+0x11a>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d07b      	beq.n	8002b86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a92:	2318      	movs	r3, #24
 8002a94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d045      	beq.n	8002b32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <osThreadNew+0x48>
        name = attr->name;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <osThreadNew+0x6e>
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b38      	cmp	r3, #56	; 0x38
 8002acc:	d805      	bhi.n	8002ada <osThreadNew+0x6e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <osThreadNew+0x72>
        return (NULL);
 8002ada:	2300      	movs	r3, #0
 8002adc:	e054      	b.n	8002b88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <osThreadNew+0xa8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b5b      	cmp	r3, #91	; 0x5b
 8002afc:	d90a      	bls.n	8002b14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <osThreadNew+0xa8>
        mem = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e010      	b.n	8002b36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10c      	bne.n	8002b36 <osThreadNew+0xca>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <osThreadNew+0xca>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <osThreadNew+0xca>
          mem = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e001      	b.n	8002b36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d110      	bne.n	8002b5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b44:	9202      	str	r2, [sp, #8]
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a3a      	ldr	r2, [r7, #32]
 8002b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f001 f88a 	bl	8003c6c <xTaskCreateStatic>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e013      	b.n	8002b86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f001 f8d5 	bl	8003d26 <xTaskCreate>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <osThreadNew+0x11a>
            hTask = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b86:	693b      	ldr	r3, [r7, #16]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b9c:	f3ef 8305 	mrs	r3, IPSR
 8002ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <osThreadGetName+0x1e>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <osThreadGetName+0x24>
    name = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e003      	b.n	8002bbc <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 8002bb4:	6938      	ldr	r0, [r7, #16]
 8002bb6:	f001 fb51 	bl	800425c <pcTaskGetName>
 8002bba:	6178      	str	r0, [r7, #20]
  }

  return (name);
 8002bbc:	697b      	ldr	r3, [r7, #20]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bd2:	f3ef 8305 	mrs	r3, IPSR
 8002bd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <osThreadGetStackSpace+0x1e>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <osThreadGetStackSpace+0x24>
    sz = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e005      	b.n	8002bf6 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 8002bea:	6938      	ldr	r0, [r7, #16]
 8002bec:	f001 fe4c 	bl	8004888 <uxTaskGetStackHighWaterMark>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c08:	f3ef 8305 	mrs	r3, IPSR
 8002c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <osDelay+0x1c>
    stat = osErrorISR;
 8002c14:	f06f 0305 	mvn.w	r3, #5
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e007      	b.n	8002c2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f001 f9c2 	bl	8003fb0 <vTaskDelay>
    }
  }

  return (stat);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b08a      	sub	sp, #40	; 0x28
 8002c3a:	af02      	add	r7, sp, #8
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c46:	f3ef 8305 	mrs	r3, IPSR
 8002c4a:	613b      	str	r3, [r7, #16]
  return(result);
 8002c4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d15f      	bne.n	8002d12 <osMessageQueueNew+0xdc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05c      	beq.n	8002d12 <osMessageQueueNew+0xdc>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d059      	beq.n	8002d12 <osMessageQueueNew+0xdc>
    mem = -1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d029      	beq.n	8002cbe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <osMessageQueueNew+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b4f      	cmp	r3, #79	; 0x4f
 8002c78:	d90e      	bls.n	8002c98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <osMessageQueueNew+0x62>
        mem = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	e014      	b.n	8002cc2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <osMessageQueueNew+0x8c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <osMessageQueueNew+0x8c>
          mem = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e001      	b.n	8002cc2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10b      	bne.n	8002ce0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	9100      	str	r1, [sp, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fa4e 	bl	8003178 <xQueueGenericCreateStatic>
 8002cdc:	61f8      	str	r0, [r7, #28]
 8002cde:	e008      	b.n	8002cf2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fabc 	bl	8003268 <xQueueGenericCreate>
 8002cf0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e001      	b.n	8002d0a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	69f8      	ldr	r0, [r7, #28]
 8002d0e:	f000 ff4f 	bl	8003bb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002d12:	69fb      	ldr	r3, [r7, #28]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d34:	f3ef 8305 	mrs	r3, IPSR
 8002d38:	617b      	str	r3, [r7, #20]
  return(result);
 8002d3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d028      	beq.n	8002d92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <osMessageQueuePut+0x36>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <osMessageQueuePut+0x36>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002d52:	f06f 0303 	mvn.w	r3, #3
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	e038      	b.n	8002dcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002d5e:	f107 0210 	add.w	r2, r7, #16
 8002d62:	2300      	movs	r3, #0
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	69b8      	ldr	r0, [r7, #24]
 8002d68:	f000 fbda 	bl	8003520 <xQueueGenericSendFromISR>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d003      	beq.n	8002d7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002d72:	f06f 0302 	mvn.w	r3, #2
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	e028      	b.n	8002dcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d025      	beq.n	8002dcc <osMessageQueuePut+0xb0>
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <osMessageQueuePut+0xbc>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	e01c      	b.n	8002dcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <osMessageQueuePut+0x82>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002d9e:	f06f 0303 	mvn.w	r3, #3
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	e012      	b.n	8002dcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002da6:	2300      	movs	r3, #0
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	69b8      	ldr	r0, [r7, #24]
 8002dae:	f000 fab9 	bl	8003324 <xQueueGenericSend>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d009      	beq.n	8002dcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002dbe:	f06f 0301 	mvn.w	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	e002      	b.n	8002dcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002dc6:	f06f 0302 	mvn.w	r3, #2
 8002dca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002df2:	f3ef 8305 	mrs	r3, IPSR
 8002df6:	617b      	str	r3, [r7, #20]
  return(result);
 8002df8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d028      	beq.n	8002e50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <osMessageQueueGet+0x34>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <osMessageQueueGet+0x34>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002e10:	f06f 0303 	mvn.w	r3, #3
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e037      	b.n	8002e88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	69b8      	ldr	r0, [r7, #24]
 8002e26:	f000 fcf7 	bl	8003818 <xQueueReceiveFromISR>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d003      	beq.n	8002e38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002e30:	f06f 0302 	mvn.w	r3, #2
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e027      	b.n	8002e88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d024      	beq.n	8002e88 <osMessageQueueGet+0xac>
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <osMessageQueueGet+0xb8>)
 8002e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	e01b      	b.n	8002e88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <osMessageQueueGet+0x80>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002e5c:	f06f 0303 	mvn.w	r3, #3
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e011      	b.n	8002e88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	69b8      	ldr	r0, [r7, #24]
 8002e6a:	f000 fbf5 	bl	8003658 <xQueueReceive>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d009      	beq.n	8002e88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002e7a:	f06f 0301 	mvn.w	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e002      	b.n	8002e88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002e82:	f06f 0302 	mvn.w	r3, #2
 8002e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002e88:	69fb      	ldr	r3, [r7, #28]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e00e      	b.n	8002ece <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eb0:	f3ef 8305 	mrs	r3, IPSR
 8002eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002ebc:	6938      	ldr	r0, [r7, #16]
 8002ebe:	f000 fd49 	bl	8003954 <uxQueueMessagesWaitingFromISR>
 8002ec2:	6178      	str	r0, [r7, #20]
 8002ec4:	e003      	b.n	8002ece <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002ec6:	6938      	ldr	r0, [r7, #16]
 8002ec8:	f000 fd26 	bl	8003918 <uxQueueMessagesWaiting>
 8002ecc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8002ece:	697b      	ldr	r3, [r7, #20]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <vApplicationGetIdleTaskMemory+0x30>)
 8002eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	200002fc 	.word	0x200002fc
 8002f08:	20000358 	.word	0x20000358

08002f0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <vApplicationGetTimerTaskMemory+0x30>)
 8002f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	20000558 	.word	0x20000558
 8002f3c:	200005b4 	.word	0x200005b4

08002f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0208 	add.w	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f103 0208 	add.w	r2, r3, #8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0208 	add.w	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d103      	bne.n	8003002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e00c      	b.n	800301c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3308      	adds	r3, #8
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e002      	b.n	8003010 <vListInsert+0x2e>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d2f6      	bcs.n	800300a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6892      	ldr	r2, [r2, #8]
 800306a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6852      	ldr	r2, [r2, #4]
 8003074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d103      	bne.n	8003088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1e5a      	subs	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030d2:	f002 f99f 	bl	8005414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	441a      	add	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	3b01      	subs	r3, #1
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	22ff      	movs	r2, #255	; 0xff
 8003116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	; 0xff
 800311e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d114      	bne.n	8003152 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01a      	beq.n	8003166 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3310      	adds	r3, #16
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fa1d 	bl	8004574 <xTaskRemoveFromEventList>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <xQueueGenericReset+0xcc>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	e009      	b.n	8003166 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3310      	adds	r3, #16
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fef2 	bl	8002f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3324      	adds	r3, #36	; 0x24
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff feed 	bl	8002f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003166:	f002 f985 	bl	8005474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	; 0x38
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <xQueueGenericCreateStatic+0x52>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <xQueueGenericCreateStatic+0x56>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueGenericCreateStatic+0x58>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	623b      	str	r3, [r7, #32]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <xQueueGenericCreateStatic+0x7e>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <xQueueGenericCreateStatic+0x82>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <xQueueGenericCreateStatic+0x84>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	61fb      	str	r3, [r7, #28]
}
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003216:	2350      	movs	r3, #80	; 0x50
 8003218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	d00a      	beq.n	8003236 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	61bb      	str	r3, [r7, #24]
}
 8003232:	bf00      	nop
 8003234:	e7fe      	b.n	8003234 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003236:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800324a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f83f 	bl	80032dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003260:	4618      	mov	r0, r3
 8003262:	3730      	adds	r7, #48	; 0x30
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <xQueueGenericCreate+0x2a>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	613b      	str	r3, [r7, #16]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3350      	adds	r3, #80	; 0x50
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 f9d9 	bl	8005658 <pvPortMalloc>
 80032a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d011      	beq.n	80032d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3350      	adds	r3, #80	; 0x50
 80032b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032c0:	79fa      	ldrb	r2, [r7, #7]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f805 	bl	80032dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032d2:	69bb      	ldr	r3, [r7, #24]
	}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e002      	b.n	80032fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800330a:	2101      	movs	r1, #1
 800330c:	69b8      	ldr	r0, [r7, #24]
 800330e:	f7ff fecb 	bl	80030a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003332:	2300      	movs	r3, #0
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xQueueGenericSend+0x32>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <xQueueGenericSend+0x40>
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <xQueueGenericSend+0x44>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <xQueueGenericSend+0x46>
 8003368:	2300      	movs	r3, #0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <xQueueGenericSend+0x60>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d103      	bne.n	8003392 <xQueueGenericSend+0x6e>
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <xQueueGenericSend+0x72>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <xQueueGenericSend+0x74>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	623b      	str	r3, [r7, #32]
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033b2:	f001 fad5 	bl	8004960 <xTaskGetSchedulerState>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <xQueueGenericSend+0x9e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <xQueueGenericSend+0xa2>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xQueueGenericSend+0xa4>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	61fb      	str	r3, [r7, #28]
}
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033e2:	f002 f817 	bl	8005414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <xQueueGenericSend+0xd4>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d129      	bne.n	800344c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033fe:	f000 fac7 	bl	8003990 <prvCopyDataToQueue>
 8003402:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	3324      	adds	r3, #36	; 0x24
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f8af 	bl	8004574 <xTaskRemoveFromEventList>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <xQueueGenericSend+0x1f8>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	e00a      	b.n	8003444 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <xQueueGenericSend+0x1f8>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003444:	f002 f816 	bl	8005474 <vPortExitCritical>
				return pdPASS;
 8003448:	2301      	movs	r3, #1
 800344a:	e063      	b.n	8003514 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003452:	f002 f80f 	bl	8005474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003456:	2300      	movs	r3, #0
 8003458:	e05c      	b.n	8003514 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	2b00      	cmp	r3, #0
 800345e:	d106      	bne.n	800346e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4618      	mov	r0, r3
 8003466:	f001 f8e9 	bl	800463c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800346e:	f002 f801 	bl	8005474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003472:	f000 fe37 	bl	80040e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003476:	f001 ffcd 	bl	8005414 <vPortEnterCritical>
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003480:	b25b      	sxtb	r3, r3
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d103      	bne.n	8003490 <xQueueGenericSend+0x16c>
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003496:	b25b      	sxtb	r3, r3
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d103      	bne.n	80034a6 <xQueueGenericSend+0x182>
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a6:	f001 ffe5 	bl	8005474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034aa:	1d3a      	adds	r2, r7, #4
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f8d8 	bl	8004668 <xTaskCheckForTimeOut>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d124      	bne.n	8003508 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c0:	f000 fb5e 	bl	8003b80 <prvIsQueueFull>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	3310      	adds	r3, #16
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fffe 	bl	80044d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034da:	f000 fae9 	bl	8003ab0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034de:	f000 fe0f 	bl	8004100 <xTaskResumeAll>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f47f af7c 	bne.w	80033e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <xQueueGenericSend+0x1f8>)
 80034ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	e772      	b.n	80033e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fe:	f000 fad7 	bl	8003ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003502:	f000 fdfd 	bl	8004100 <xTaskResumeAll>
 8003506:	e76c      	b.n	80033e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350a:	f000 fad1 	bl	8003ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800350e:	f000 fdf7 	bl	8004100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003514:	4618      	mov	r0, r3
 8003516:	3738      	adds	r7, #56	; 0x38
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b090      	sub	sp, #64	; 0x40
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <xQueueGenericSendFromISR+0x3c>
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <xQueueGenericSendFromISR+0x40>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <xQueueGenericSendFromISR+0x42>
 8003560:	2300      	movs	r3, #0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d103      	bne.n	800358a <xQueueGenericSendFromISR+0x6a>
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <xQueueGenericSendFromISR+0x6e>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <xQueueGenericSendFromISR+0x70>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	623b      	str	r3, [r7, #32]
}
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035aa:	f002 f815 	bl	80055d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035ae:	f3ef 8211 	mrs	r2, BASEPRI
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61fa      	str	r2, [r7, #28]
 80035c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <xQueueGenericSendFromISR+0xbc>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d12f      	bne.n	800363c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035f2:	f000 f9cd 	bl	8003990 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d112      	bne.n	8003626 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d016      	beq.n	8003636 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	3324      	adds	r3, #36	; 0x24
 800360c:	4618      	mov	r0, r3
 800360e:	f000 ffb1 	bl	8004574 <xTaskRemoveFromEventList>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e007      	b.n	8003636 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003626:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800362a:	3301      	adds	r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	b25a      	sxtb	r2, r3
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003636:	2301      	movs	r3, #1
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800363a:	e001      	b.n	8003640 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800363c:	2300      	movs	r3, #0
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800364a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800364e:	4618      	mov	r0, r3
 8003650:	3740      	adds	r7, #64	; 0x40
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <xQueueReceive+0x30>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	623b      	str	r3, [r7, #32]
}
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <xQueueReceive+0x3e>
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <xQueueReceive+0x42>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueReceive+0x44>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueReceive+0x5e>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61fb      	str	r3, [r7, #28]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036b6:	f001 f953 	bl	8004960 <xTaskGetSchedulerState>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <xQueueReceive+0x6e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <xQueueReceive+0x72>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xQueueReceive+0x74>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xQueueReceive+0x8e>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61bb      	str	r3, [r7, #24]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036e6:	f001 fe95 	bl	8005414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01f      	beq.n	8003736 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fa:	f000 f9b3 	bl	8003a64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00f      	beq.n	800372e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	3310      	adds	r3, #16
 8003712:	4618      	mov	r0, r3
 8003714:	f000 ff2e 	bl	8004574 <xTaskRemoveFromEventList>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <xQueueReceive+0x1bc>)
 8003720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800372e:	f001 fea1 	bl	8005474 <vPortExitCritical>
				return pdPASS;
 8003732:	2301      	movs	r3, #1
 8003734:	e069      	b.n	800380a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d103      	bne.n	8003744 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800373c:	f001 fe9a 	bl	8005474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003740:	2300      	movs	r3, #0
 8003742:	e062      	b.n	800380a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800374a:	f107 0310 	add.w	r3, r7, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f000 ff74 	bl	800463c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003758:	f001 fe8c 	bl	8005474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800375c:	f000 fcc2 	bl	80040e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003760:	f001 fe58 	bl	8005414 <vPortEnterCritical>
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800376a:	b25b      	sxtb	r3, r3
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d103      	bne.n	800377a <xQueueReceive+0x122>
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003780:	b25b      	sxtb	r3, r3
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d103      	bne.n	8003790 <xQueueReceive+0x138>
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003790:	f001 fe70 	bl	8005474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003794:	1d3a      	adds	r2, r7, #4
 8003796:	f107 0310 	add.w	r3, r7, #16
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f000 ff63 	bl	8004668 <xTaskCheckForTimeOut>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d123      	bne.n	80037f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037aa:	f000 f9d3 	bl	8003b54 <prvIsQueueEmpty>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	3324      	adds	r3, #36	; 0x24
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fe89 	bl	80044d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037c4:	f000 f974 	bl	8003ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037c8:	f000 fc9a 	bl	8004100 <xTaskResumeAll>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d189      	bne.n	80036e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <xQueueReceive+0x1bc>)
 80037d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	e780      	b.n	80036e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e6:	f000 f963 	bl	8003ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037ea:	f000 fc89 	bl	8004100 <xTaskResumeAll>
 80037ee:	e77a      	b.n	80036e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f2:	f000 f95d 	bl	8003ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037f6:	f000 fc83 	bl	8004100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fc:	f000 f9aa 	bl	8003b54 <prvIsQueueEmpty>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f43f af6f 	beq.w	80036e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003808:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800380a:	4618      	mov	r0, r3
 800380c:	3730      	adds	r7, #48	; 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	; 0x38
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	623b      	str	r3, [r7, #32]
}
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <xQueueReceiveFromISR+0x3a>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <xQueueReceiveFromISR+0x3e>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueReceiveFromISR+0x40>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	61fb      	str	r3, [r7, #28]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003872:	f001 feb1 	bl	80055d8 <vPortValidateInterruptPriority>
	__asm volatile
 8003876:	f3ef 8211 	mrs	r2, BASEPRI
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	61ba      	str	r2, [r7, #24]
 800388c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800388e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02f      	beq.n	80038fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ac:	f000 f8da 	bl	8003a64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	1e5a      	subs	r2, r3, #1
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80038b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d112      	bne.n	80038e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	3310      	adds	r3, #16
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fe50 	bl	8004574 <xTaskRemoveFromEventList>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e007      	b.n	80038f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80038e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038ec:	3301      	adds	r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	b25a      	sxtb	r2, r3
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80038f8:	2301      	movs	r3, #1
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
 80038fc:	e001      	b.n	8003902 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f383 8811 	msr	BASEPRI, r3
}
 800390c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800390e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003910:	4618      	mov	r0, r3
 8003912:	3738      	adds	r7, #56	; 0x38
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	60bb      	str	r3, [r7, #8]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800393c:	f001 fd6a 	bl	8005414 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003946:	f001 fd95 	bl	8005474 <vPortExitCritical>

	return uxReturn;
 800394a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	60fb      	str	r3, [r7, #12]
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8003982:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003984:	4618      	mov	r0, r3
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10d      	bne.n	80039ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d14d      	bne.n	8003a52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 ffee 	bl	800499c <xTaskPriorityDisinherit>
 80039c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	e043      	b.n	8003a52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d119      	bne.n	8003a04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6858      	ldr	r0, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	461a      	mov	r2, r3
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	f002 f850 	bl	8005a80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d32b      	bcc.n	8003a52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	e026      	b.n	8003a52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68d8      	ldr	r0, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	f002 f836 	bl	8005a80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	441a      	add	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d207      	bcs.n	8003a40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	425b      	negs	r3, r3
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d105      	bne.n	8003a52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a5a:	697b      	ldr	r3, [r7, #20]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	441a      	add	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d303      	bcc.n	8003a98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68d9      	ldr	r1, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6838      	ldr	r0, [r7, #0]
 8003aa4:	f001 ffec 	bl	8005a80 <memcpy>
	}
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ab8:	f001 fcac 	bl	8005414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ac4:	e011      	b.n	8003aea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d012      	beq.n	8003af4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3324      	adds	r3, #36	; 0x24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fd4e 	bl	8004574 <xTaskRemoveFromEventList>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ade:	f000 fe25 	bl	800472c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	dce9      	bgt.n	8003ac6 <prvUnlockQueue+0x16>
 8003af2:	e000      	b.n	8003af6 <prvUnlockQueue+0x46>
					break;
 8003af4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	22ff      	movs	r2, #255	; 0xff
 8003afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003afe:	f001 fcb9 	bl	8005474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b02:	f001 fc87 	bl	8005414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b0e:	e011      	b.n	8003b34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3310      	adds	r3, #16
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fd29 	bl	8004574 <xTaskRemoveFromEventList>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b28:	f000 fe00 	bl	800472c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b2c:	7bbb      	ldrb	r3, [r7, #14]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dce9      	bgt.n	8003b10 <prvUnlockQueue+0x60>
 8003b3c:	e000      	b.n	8003b40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	22ff      	movs	r2, #255	; 0xff
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b48:	f001 fc94 	bl	8005474 <vPortExitCritical>
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b5c:	f001 fc5a 	bl	8005414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e001      	b.n	8003b72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b72:	f001 fc7f 	bl	8005474 <vPortExitCritical>

	return xReturn;
 8003b76:	68fb      	ldr	r3, [r7, #12]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b88:	f001 fc44 	bl	8005414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d102      	bne.n	8003b9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e001      	b.n	8003ba2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ba2:	f001 fc67 	bl	8005474 <vPortExitCritical>

	return xReturn;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e014      	b.n	8003bea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <vQueueAddToRegistry+0x50>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bcc:	490c      	ldr	r1, [pc, #48]	; (8003c00 <vQueueAddToRegistry+0x50>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <vQueueAddToRegistry+0x50>)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003be2:	e006      	b.n	8003bf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	d9e7      	bls.n	8003bc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20004cac 	.word	0x20004cac

08003c04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c14:	f001 fbfe 	bl	8005414 <vPortEnterCritical>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d103      	bne.n	8003c2e <vQueueWaitForMessageRestricted+0x2a>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d103      	bne.n	8003c44 <vQueueWaitForMessageRestricted+0x40>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c44:	f001 fc16 	bl	8005474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3324      	adds	r3, #36	; 0x24
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fc5f 	bl	800451c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f7ff ff26 	bl	8003ab0 <prvUnlockQueue>
	}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	; 0x38
 8003c70:	af04      	add	r7, sp, #16
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	623b      	str	r3, [r7, #32]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	61fb      	str	r3, [r7, #28]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cb2:	235c      	movs	r3, #92	; 0x5c
 8003cb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b5c      	cmp	r3, #92	; 0x5c
 8003cba:	d00a      	beq.n	8003cd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	61bb      	str	r3, [r7, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01e      	beq.n	8003d18 <xTaskCreateStatic+0xac>
 8003cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	9302      	str	r3, [sp, #8]
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f850 	bl	8003db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d12:	f000 f8dd 	bl	8003ed0 <prvAddNewTaskToReadyList>
 8003d16:	e001      	b.n	8003d1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d1c:	697b      	ldr	r3, [r7, #20]
	}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3728      	adds	r7, #40	; 0x28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08c      	sub	sp, #48	; 0x30
 8003d2a:	af04      	add	r7, sp, #16
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fc8c 	bl	8005658 <pvPortMalloc>
 8003d40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d48:	205c      	movs	r0, #92	; 0x5c
 8003d4a:	f001 fc85 	bl	8005658 <pvPortMalloc>
 8003d4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5c:	e005      	b.n	8003d6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f001 fd46 	bl	80057f0 <vPortFree>
 8003d64:	e001      	b.n	8003d6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d78:	88fa      	ldrh	r2, [r7, #6]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9303      	str	r3, [sp, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	9302      	str	r3, [sp, #8]
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f80e 	bl	8003db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d94:	69f8      	ldr	r0, [r7, #28]
 8003d96:	f000 f89b 	bl	8003ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e002      	b.n	8003da6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003da6:	69bb      	ldr	r3, [r7, #24]
	}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	21a5      	movs	r1, #165	; 0xa5
 8003dca:	f001 fe67 	bl	8005a9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01f      	beq.n	8003e4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e012      	b.n	8003e3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	7819      	ldrb	r1, [r3, #0]
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	3334      	adds	r3, #52	; 0x34
 8003e24:	460a      	mov	r2, r1
 8003e26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d9e9      	bls.n	8003e14 <prvInitialiseNewTask+0x64>
 8003e40:	e000      	b.n	8003e44 <prvInitialiseNewTask+0x94>
			{
				break;
 8003e42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e4c:	e003      	b.n	8003e56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	2b37      	cmp	r3, #55	; 0x37
 8003e5a:	d901      	bls.n	8003e60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e5c:	2337      	movs	r3, #55	; 0x37
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2200      	movs	r2, #0
 8003e70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	3304      	adds	r3, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f882 	bl	8002f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	3318      	adds	r3, #24
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff f87d 	bl	8002f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	69b8      	ldr	r0, [r7, #24]
 8003eb0:	f001 f984 	bl	80051bc <pxPortInitialiseStack>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ed8:	f001 fa9c 	bl	8005414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <prvAddNewTaskToReadyList+0xc4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <prvAddNewTaskToReadyList+0xc4>)
 8003ee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <prvAddNewTaskToReadyList+0xc4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d110      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003efc:	f000 fc3a 	bl	8004774 <prvInitialiseTaskLists>
 8003f00:	e00d      	b.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <prvAddNewTaskToReadyList+0xcc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d802      	bhi.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f18:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <prvAddNewTaskToReadyList+0xd0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <prvAddNewTaskToReadyList+0xd0>)
 8003f26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <prvAddNewTaskToReadyList+0xd0>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <prvAddNewTaskToReadyList+0xd4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <prvAddNewTaskToReadyList+0x74>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <prvAddNewTaskToReadyList+0xd4>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <prvAddNewTaskToReadyList+0xd8>)
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7ff f81d 	bl	8002f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f60:	f001 fa88 	bl	8005474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <prvAddNewTaskToReadyList+0xcc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d207      	bcs.n	8003f8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <prvAddNewTaskToReadyList+0xdc>)
 8003f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000e88 	.word	0x20000e88
 8003f98:	200009b4 	.word	0x200009b4
 8003f9c:	20000e94 	.word	0x20000e94
 8003fa0:	20000ea4 	.word	0x20000ea4
 8003fa4:	20000e90 	.word	0x20000e90
 8003fa8:	200009b8 	.word	0x200009b8
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d017      	beq.n	8003ff2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <vTaskDelay+0x60>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <vTaskDelay+0x30>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60bb      	str	r3, [r7, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fe0:	f000 f880 	bl	80040e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fd46 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fec:	f000 f888 	bl	8004100 <xTaskResumeAll>
 8003ff0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <vTaskDelay+0x64>)
 8003ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000eb0 	.word	0x20000eb0
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004026:	463a      	mov	r2, r7
 8004028:	1d39      	adds	r1, r7, #4
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe ff52 	bl	8002ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004034:	6839      	ldr	r1, [r7, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	9202      	str	r2, [sp, #8]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2300      	movs	r3, #0
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	460a      	mov	r2, r1
 8004046:	4921      	ldr	r1, [pc, #132]	; (80040cc <vTaskStartScheduler+0xb4>)
 8004048:	4821      	ldr	r0, [pc, #132]	; (80040d0 <vTaskStartScheduler+0xb8>)
 800404a:	f7ff fe0f 	bl	8003c6c <xTaskCreateStatic>
 800404e:	4603      	mov	r3, r0
 8004050:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <vTaskStartScheduler+0xbc>)
 8004052:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004054:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <vTaskStartScheduler+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e001      	b.n	8004066 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800406c:	f000 fd58 	bl	8004b20 <xTimerCreateTimerTask>
 8004070:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d116      	bne.n	80040a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	613b      	str	r3, [r7, #16]
}
 800408a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <vTaskStartScheduler+0xc0>)
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <vTaskStartScheduler+0xc4>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <vTaskStartScheduler+0xc8>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040a0:	f001 f916 	bl	80052d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040a4:	e00e      	b.n	80040c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d10a      	bne.n	80040c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	60fb      	str	r3, [r7, #12]
}
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <vTaskStartScheduler+0xaa>
}
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	080063e0 	.word	0x080063e0
 80040d0:	08004745 	.word	0x08004745
 80040d4:	20000eac 	.word	0x20000eac
 80040d8:	20000ea8 	.word	0x20000ea8
 80040dc:	20000e94 	.word	0x20000e94
 80040e0:	20000e8c 	.word	0x20000e8c

080040e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <vTaskSuspendAll+0x18>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <vTaskSuspendAll+0x18>)
 80040f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	20000eb0 	.word	0x20000eb0

08004100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800410e:	4b42      	ldr	r3, [pc, #264]	; (8004218 <xTaskResumeAll+0x118>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xTaskResumeAll+0x2c>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	603b      	str	r3, [r7, #0]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800412c:	f001 f972 	bl	8005414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004130:	4b39      	ldr	r3, [pc, #228]	; (8004218 <xTaskResumeAll+0x118>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3b01      	subs	r3, #1
 8004136:	4a38      	ldr	r2, [pc, #224]	; (8004218 <xTaskResumeAll+0x118>)
 8004138:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <xTaskResumeAll+0x118>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d162      	bne.n	8004208 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <xTaskResumeAll+0x11c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d05e      	beq.n	8004208 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800414a:	e02f      	b.n	80041ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b34      	ldr	r3, [pc, #208]	; (8004220 <xTaskResumeAll+0x120>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe ff7b 	bl	8003054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe ff76 	bl	8003054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <xTaskResumeAll+0x124>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d903      	bls.n	800417c <xTaskResumeAll+0x7c>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <xTaskResumeAll+0x124>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <xTaskResumeAll+0x128>)
 800418a:	441a      	add	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fe ff01 	bl	8002f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <xTaskResumeAll+0x12c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <xTaskResumeAll+0x130>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ac:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <xTaskResumeAll+0x120>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1cb      	bne.n	800414c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041ba:	f000 fbb1 	bl	8004920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <xTaskResumeAll+0x134>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041ca:	f000 f86b 	bl	80042a4 <xTaskIncrementTick>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <xTaskResumeAll+0x130>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f1      	bne.n	80041ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <xTaskResumeAll+0x134>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <xTaskResumeAll+0x130>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <xTaskResumeAll+0x138>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004208:	f001 f934 	bl	8005474 <vPortExitCritical>

	return xAlreadyYielded;
 800420c:	68bb      	ldr	r3, [r7, #8]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000eb0 	.word	0x20000eb0
 800421c:	20000e88 	.word	0x20000e88
 8004220:	20000e48 	.word	0x20000e48
 8004224:	20000e90 	.word	0x20000e90
 8004228:	200009b8 	.word	0x200009b8
 800422c:	200009b4 	.word	0x200009b4
 8004230:	20000e9c 	.word	0x20000e9c
 8004234:	20000e98 	.word	0x20000e98
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <xTaskGetTickCount+0x1c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000e8c 	.word	0x20000e8c

0800425c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <pcTaskGetName+0x14>
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <pcTaskGetName+0x44>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e000      	b.n	8004272 <pcTaskGetName+0x16>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <pcTaskGetName+0x34>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3334      	adds	r3, #52	; 0x34
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	200009b4 	.word	0x200009b4

080042a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ae:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <xTaskIncrementTick+0x148>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 808f 	bne.w	80043d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042b8:	4b4d      	ldr	r3, [pc, #308]	; (80043f0 <xTaskIncrementTick+0x14c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042c0:	4a4b      	ldr	r2, [pc, #300]	; (80043f0 <xTaskIncrementTick+0x14c>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d120      	bne.n	800430e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042cc:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <xTaskIncrementTick+0x150>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <xTaskIncrementTick+0x48>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	603b      	str	r3, [r7, #0]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <xTaskIncrementTick+0x46>
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <xTaskIncrementTick+0x150>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <xTaskIncrementTick+0x154>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3f      	ldr	r2, [pc, #252]	; (80043f4 <xTaskIncrementTick+0x150>)
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <xTaskIncrementTick+0x154>)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <xTaskIncrementTick+0x158>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <xTaskIncrementTick+0x158>)
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	f000 fb09 	bl	8004920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800430e:	4b3c      	ldr	r3, [pc, #240]	; (8004400 <xTaskIncrementTick+0x15c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	429a      	cmp	r2, r3
 8004316:	d349      	bcc.n	80043ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <xTaskIncrementTick+0x150>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004322:	4b37      	ldr	r3, [pc, #220]	; (8004400 <xTaskIncrementTick+0x15c>)
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	601a      	str	r2, [r3, #0]
					break;
 800432a:	e03f      	b.n	80043ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <xTaskIncrementTick+0x150>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d203      	bcs.n	800434c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004344:	4a2e      	ldr	r2, [pc, #184]	; (8004400 <xTaskIncrementTick+0x15c>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800434a:	e02f      	b.n	80043ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3304      	adds	r3, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe fe7f 	bl	8003054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3318      	adds	r3, #24
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fe76 	bl	8003054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <xTaskIncrementTick+0x160>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d903      	bls.n	800437c <xTaskIncrementTick+0xd8>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <xTaskIncrementTick+0x160>)
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <xTaskIncrementTick+0x164>)
 800438a:	441a      	add	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7fe fe01 	bl	8002f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <xTaskIncrementTick+0x168>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d3b8      	bcc.n	8004318 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043aa:	e7b5      	b.n	8004318 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <xTaskIncrementTick+0x168>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b2:	4915      	ldr	r1, [pc, #84]	; (8004408 <xTaskIncrementTick+0x164>)
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d901      	bls.n	80043c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <xTaskIncrementTick+0x16c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e004      	b.n	80043e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <xTaskIncrementTick+0x170>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <xTaskIncrementTick+0x170>)
 80043de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043e0:	697b      	ldr	r3, [r7, #20]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000eb0 	.word	0x20000eb0
 80043f0:	20000e8c 	.word	0x20000e8c
 80043f4:	20000e40 	.word	0x20000e40
 80043f8:	20000e44 	.word	0x20000e44
 80043fc:	20000ea0 	.word	0x20000ea0
 8004400:	20000ea8 	.word	0x20000ea8
 8004404:	20000e90 	.word	0x20000e90
 8004408:	200009b8 	.word	0x200009b8
 800440c:	200009b4 	.word	0x200009b4
 8004410:	20000e9c 	.word	0x20000e9c
 8004414:	20000e98 	.word	0x20000e98

08004418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <vTaskSwitchContext+0xa8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004426:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <vTaskSwitchContext+0xac>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800442c:	e041      	b.n	80044b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800442e:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <vTaskSwitchContext+0xac>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <vTaskSwitchContext+0xb0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e010      	b.n	800445e <vTaskSwitchContext+0x46>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <vTaskSwitchContext+0x40>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	607b      	str	r3, [r7, #4]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vTaskSwitchContext+0x3e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3b01      	subs	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	491b      	ldr	r1, [pc, #108]	; (80044cc <vTaskSwitchContext+0xb4>)
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0e4      	beq.n	800443c <vTaskSwitchContext+0x24>
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <vTaskSwitchContext+0xb4>)
 800447e:	4413      	add	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3308      	adds	r3, #8
 8004494:	429a      	cmp	r2, r3
 8004496:	d104      	bne.n	80044a2 <vTaskSwitchContext+0x8a>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <vTaskSwitchContext+0xb8>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <vTaskSwitchContext+0xb0>)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6013      	str	r3, [r2, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000eb0 	.word	0x20000eb0
 80044c4:	20000e9c 	.word	0x20000e9c
 80044c8:	20000e90 	.word	0x20000e90
 80044cc:	200009b8 	.word	0x200009b8
 80044d0:	200009b4 	.word	0x200009b4

080044d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vTaskPlaceOnEventList+0x44>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3318      	adds	r3, #24
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe fd6d 	bl	8002fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004508:	2101      	movs	r1, #1
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f000 fab4 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	200009b4 	.word	0x200009b4

0800451c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	617b      	str	r3, [r7, #20]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <vTaskPlaceOnEventListRestricted+0x54>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3318      	adds	r3, #24
 800454a:	4619      	mov	r1, r3
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7fe fd24 	bl	8002f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	68b8      	ldr	r0, [r7, #8]
 8004562:	f000 fa89 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
	}
 8004566:	bf00      	nop
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200009b4 	.word	0x200009b4

08004574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	60fb      	str	r3, [r7, #12]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3318      	adds	r3, #24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe fd55 	bl	8003054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <xTaskRemoveFromEventList+0xb0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11d      	bne.n	80045ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fd4c 	bl	8003054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <xTaskRemoveFromEventList+0xb4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d903      	bls.n	80045d0 <xTaskRemoveFromEventList+0x5c>
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <xTaskRemoveFromEventList+0xb4>)
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <xTaskRemoveFromEventList+0xb8>)
 80045de:	441a      	add	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7fe fcd7 	bl	8002f9a <vListInsertEnd>
 80045ec:	e005      	b.n	80045fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4619      	mov	r1, r3
 80045f4:	480e      	ldr	r0, [pc, #56]	; (8004630 <xTaskRemoveFromEventList+0xbc>)
 80045f6:	f7fe fcd0 	bl	8002f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <xTaskRemoveFromEventList+0xc0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	429a      	cmp	r2, r3
 8004606:	d905      	bls.n	8004614 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <xTaskRemoveFromEventList+0xc4>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e001      	b.n	8004618 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004618:	697b      	ldr	r3, [r7, #20]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000eb0 	.word	0x20000eb0
 8004628:	20000e90 	.word	0x20000e90
 800462c:	200009b8 	.word	0x200009b8
 8004630:	20000e48 	.word	0x20000e48
 8004634:	200009b4 	.word	0x200009b4
 8004638:	20000e9c 	.word	0x20000e9c

0800463c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <vTaskInternalSetTimeOutState+0x24>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <vTaskInternalSetTimeOutState+0x28>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	20000ea0 	.word	0x20000ea0
 8004664:	20000e8c 	.word	0x20000e8c

08004668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	613b      	str	r3, [r7, #16]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80046aa:	f000 feb3 	bl	8005414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <xTaskCheckForTimeOut+0xbc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d102      	bne.n	80046ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e023      	b.n	8004716 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <xTaskCheckForTimeOut+0xc0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d007      	beq.n	80046ea <xTaskCheckForTimeOut+0x82>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e015      	b.n	8004716 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d20b      	bcs.n	800470c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff9b 	bl	800463c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e004      	b.n	8004716 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004716:	f000 fead 	bl	8005474 <vPortExitCritical>

	return xReturn;
 800471a:	69fb      	ldr	r3, [r7, #28]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000e8c 	.word	0x20000e8c
 8004728:	20000ea0 	.word	0x20000ea0

0800472c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <vTaskMissedYield+0x14>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000e9c 	.word	0x20000e9c

08004744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800474c:	f000 f852 	bl	80047f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004750:	4b06      	ldr	r3, [pc, #24]	; (800476c <prvIdleTask+0x28>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d9f9      	bls.n	800474c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <prvIdleTask+0x2c>)
 800475a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004768:	e7f0      	b.n	800474c <prvIdleTask+0x8>
 800476a:	bf00      	nop
 800476c:	200009b8 	.word	0x200009b8
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	e00c      	b.n	800479a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <prvInitialiseTaskLists+0x60>)
 800478c:	4413      	add	r3, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fbd6 	bl	8002f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3301      	adds	r3, #1
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b37      	cmp	r3, #55	; 0x37
 800479e:	d9ef      	bls.n	8004780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047a0:	480d      	ldr	r0, [pc, #52]	; (80047d8 <prvInitialiseTaskLists+0x64>)
 80047a2:	f7fe fbcd 	bl	8002f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047a6:	480d      	ldr	r0, [pc, #52]	; (80047dc <prvInitialiseTaskLists+0x68>)
 80047a8:	f7fe fbca 	bl	8002f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047ac:	480c      	ldr	r0, [pc, #48]	; (80047e0 <prvInitialiseTaskLists+0x6c>)
 80047ae:	f7fe fbc7 	bl	8002f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047b2:	480c      	ldr	r0, [pc, #48]	; (80047e4 <prvInitialiseTaskLists+0x70>)
 80047b4:	f7fe fbc4 	bl	8002f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047b8:	480b      	ldr	r0, [pc, #44]	; (80047e8 <prvInitialiseTaskLists+0x74>)
 80047ba:	f7fe fbc1 	bl	8002f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <prvInitialiseTaskLists+0x78>)
 80047c0:	4a05      	ldr	r2, [pc, #20]	; (80047d8 <prvInitialiseTaskLists+0x64>)
 80047c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <prvInitialiseTaskLists+0x7c>)
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <prvInitialiseTaskLists+0x68>)
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200009b8 	.word	0x200009b8
 80047d8:	20000e18 	.word	0x20000e18
 80047dc:	20000e2c 	.word	0x20000e2c
 80047e0:	20000e48 	.word	0x20000e48
 80047e4:	20000e5c 	.word	0x20000e5c
 80047e8:	20000e74 	.word	0x20000e74
 80047ec:	20000e40 	.word	0x20000e40
 80047f0:	20000e44 	.word	0x20000e44

080047f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047fa:	e019      	b.n	8004830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047fc:	f000 fe0a 	bl	8005414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004800:	4b10      	ldr	r3, [pc, #64]	; (8004844 <prvCheckTasksWaitingTermination+0x50>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fc21 	bl	8003054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <prvCheckTasksWaitingTermination+0x54>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <prvCheckTasksWaitingTermination+0x54>)
 800481a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <prvCheckTasksWaitingTermination+0x58>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3b01      	subs	r3, #1
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <prvCheckTasksWaitingTermination+0x58>)
 8004824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004826:	f000 fe25 	bl	8005474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f848 	bl	80048c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <prvCheckTasksWaitingTermination+0x58>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e1      	bne.n	80047fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000e5c 	.word	0x20000e5c
 8004848:	20000e88 	.word	0x20000e88
 800484c:	20000e70 	.word	0x20000e70

08004850 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800485c:	e005      	b.n	800486a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3301      	adds	r3, #1
 8004862:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2ba5      	cmp	r3, #165	; 0xa5
 8004870:	d0f5      	beq.n	800485e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	b29b      	uxth	r3, r3
	}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <uxTaskGetStackHighWaterMark+0x14>
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <uxTaskGetStackHighWaterMark+0x34>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e000      	b.n	800489e <uxTaskGetStackHighWaterMark+0x16>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80048a6:	6938      	ldr	r0, [r7, #16]
 80048a8:	f7ff ffd2 	bl	8004850 <prvTaskCheckFreeStackSpace>
 80048ac:	4603      	mov	r3, r0
 80048ae:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80048b0:	68fb      	ldr	r3, [r7, #12]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200009b4 	.word	0x200009b4

080048c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 ff8a 	bl	80057f0 <vPortFree>
				vPortFree( pxTCB );
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 ff87 	bl	80057f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048e2:	e018      	b.n	8004916 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d103      	bne.n	80048f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 ff7e 	bl	80057f0 <vPortFree>
	}
 80048f4:	e00f      	b.n	8004916 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d00a      	beq.n	8004916 <prvDeleteTCB+0x56>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	60fb      	str	r3, [r7, #12]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <prvDeleteTCB+0x54>
	}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvResetNextTaskUnblockTime+0x38>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004938:	e008      	b.n	800494c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvResetNextTaskUnblockTime+0x38>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <prvResetNextTaskUnblockTime+0x3c>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000e40 	.word	0x20000e40
 800495c:	20000ea8 	.word	0x20000ea8

08004960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <xTaskGetSchedulerState+0x34>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800496e:	2301      	movs	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	e008      	b.n	8004986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <xTaskGetSchedulerState+0x38>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800497c:	2302      	movs	r3, #2
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e001      	b.n	8004986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004986:	687b      	ldr	r3, [r7, #4]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	20000e94 	.word	0x20000e94
 8004998:	20000eb0 	.word	0x20000eb0

0800499c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d056      	beq.n	8004a60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049b2:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <xTaskPriorityDisinherit+0xd0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d00a      	beq.n	80049d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60bb      	str	r3, [r7, #8]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d02c      	beq.n	8004a60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d128      	bne.n	8004a60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fb1e 	bl	8003054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <xTaskPriorityDisinherit+0xd4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d903      	bls.n	8004a40 <xTaskPriorityDisinherit+0xa4>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <xTaskPriorityDisinherit+0xd4>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <xTaskPriorityDisinherit+0xd8>)
 8004a4e:	441a      	add	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fe fa9f 	bl	8002f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a60:	697b      	ldr	r3, [r7, #20]
	}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200009b4 	.word	0x200009b4
 8004a70:	20000e90 	.word	0x20000e90
 8004a74:	200009b8 	.word	0x200009b8

08004a78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fae0 	bl	8003054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d10a      	bne.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4819      	ldr	r0, [pc, #100]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x98>)
 8004aac:	f7fe fa75 	bl	8002f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ab0:	e026      	b.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d209      	bcs.n	8004ade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe fa83 	bl	8002fe2 <vListInsert>
}
 8004adc:	e010      	b.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f7fe fa79 	bl	8002fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d202      	bcs.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000e8c 	.word	0x20000e8c
 8004b0c:	200009b4 	.word	0x200009b4
 8004b10:	20000e74 	.word	0x20000e74
 8004b14:	20000e44 	.word	0x20000e44
 8004b18:	20000e40 	.word	0x20000e40
 8004b1c:	20000ea8 	.word	0x20000ea8

08004b20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b2a:	f000 fb07 	bl	800513c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <xTimerCreateTimerTask+0x80>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d021      	beq.n	8004b7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b3e:	1d3a      	adds	r2, r7, #4
 8004b40:	f107 0108 	add.w	r1, r7, #8
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe f9df 	bl	8002f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	9202      	str	r2, [sp, #8]
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	460a      	mov	r2, r1
 8004b60:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <xTimerCreateTimerTask+0x84>)
 8004b62:	4811      	ldr	r0, [pc, #68]	; (8004ba8 <xTimerCreateTimerTask+0x88>)
 8004b64:	f7ff f882 	bl	8003c6c <xTaskCreateStatic>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <xTimerCreateTimerTask+0x8c>)
 8004b6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <xTimerCreateTimerTask+0x8c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b76:	2301      	movs	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b96:	697b      	ldr	r3, [r7, #20]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000ee4 	.word	0x20000ee4
 8004ba4:	080063e8 	.word	0x080063e8
 8004ba8:	08004ce5 	.word	0x08004ce5
 8004bac:	20000ee8 	.word	0x20000ee8

08004bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xTimerGenericCommand+0x2e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	623b      	str	r3, [r7, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d02a      	beq.n	8004c3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	dc18      	bgt.n	8004c2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bf8:	f7ff feb2 	bl	8004960 <xTaskGetSchedulerState>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d109      	bne.n	8004c16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	f107 0110 	add.w	r1, r7, #16
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	f7fe fb89 	bl	8003324 <xQueueGenericSend>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24
 8004c14:	e012      	b.n	8004c3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f107 0110 	add.w	r1, r7, #16
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2200      	movs	r2, #0
 8004c22:	f7fe fb7f 	bl	8003324 <xQueueGenericSend>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24
 8004c28:	e008      	b.n	8004c3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f107 0110 	add.w	r1, r7, #16
 8004c32:	2300      	movs	r3, #0
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	f7fe fc73 	bl	8003520 <xQueueGenericSendFromISR>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000ee4 	.word	0x20000ee4

08004c4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <prvProcessExpiredTimer+0x94>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe f9f5 	bl	8003054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d022      	beq.n	8004cbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	18d1      	adds	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f000 f8d1 	bl	8004e2c <prvInsertTimerInActiveList>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01f      	beq.n	8004cd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c90:	2300      	movs	r3, #0
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff ff88 	bl	8004bb0 <xTimerGenericCommand>
 8004ca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d113      	bne.n	8004cd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	4798      	blx	r3
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000edc 	.word	0x20000edc

08004ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f857 	bl	8004da4 <prvGetNextExpireTime>
 8004cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f803 	bl	8004d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d02:	f000 f8d5 	bl	8004eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d06:	e7f1      	b.n	8004cec <prvTimerTask+0x8>

08004d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d12:	f7ff f9e7 	bl	80040e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f866 	bl	8004dec <prvSampleTimeNow>
 8004d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d130      	bne.n	8004d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <prvProcessTimerOrBlockTask+0x3c>
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d806      	bhi.n	8004d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d36:	f7ff f9e3 	bl	8004100 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ff85 	bl	8004c4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d42:	e024      	b.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <prvProcessTimerOrBlockTask+0x90>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <prvProcessTimerOrBlockTask+0x50>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <prvProcessTimerOrBlockTask+0x52>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <prvProcessTimerOrBlockTask+0x94>)
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fe ff4b 	bl	8003c04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d6e:	f7ff f9c7 	bl	8004100 <xTaskResumeAll>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <prvProcessTimerOrBlockTask+0x98>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
}
 8004d88:	e001      	b.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d8a:	f7ff f9b9 	bl	8004100 <xTaskResumeAll>
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000ee0 	.word	0x20000ee0
 8004d9c:	20000ee4 	.word	0x20000ee4
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <prvGetNextExpireTime+0x44>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <prvGetNextExpireTime+0x16>
 8004db6:	2201      	movs	r2, #1
 8004db8:	e000      	b.n	8004dbc <prvGetNextExpireTime+0x18>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <prvGetNextExpireTime+0x44>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e001      	b.n	8004dd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000edc 	.word	0x20000edc

08004dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004df4:	f7ff fa22 	bl	800423c <xTaskGetTickCount>
 8004df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <prvSampleTimeNow+0x3c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d205      	bcs.n	8004e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e04:	f000 f936 	bl	8005074 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <prvSampleTimeNow+0x3c>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000eec 	.word	0x20000eec

08004e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d812      	bhi.n	8004e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e01b      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <prvInsertTimerInActiveList+0x7c>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fe f8b6 	bl	8002fe2 <vListInsert>
 8004e76:	e012      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d206      	bcs.n	8004e8e <prvInsertTimerInActiveList+0x62>
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e007      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <prvInsertTimerInActiveList+0x80>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f7fe f8a2 	bl	8002fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000ee0 	.word	0x20000ee0
 8004eac:	20000edc 	.word	0x20000edc

08004eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	; 0x38
 8004eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eb6:	e0ca      	b.n	800504e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da18      	bge.n	8004ef0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	61fb      	str	r3, [r7, #28]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee6:	6850      	ldr	r0, [r2, #4]
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f2c0 80aa 	blt.w	800504c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe f8a3 	bl	8003054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0e:	463b      	mov	r3, r7
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ff6b 	bl	8004dec <prvSampleTimeNow>
 8004f16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	f200 8097 	bhi.w	800504e <prvProcessReceivedCommands+0x19e>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <prvProcessReceivedCommands+0x78>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004fc5 	.word	0x08004fc5
 8004f38:	08004fd9 	.word	0x08004fd9
 8004f3c:	08005023 	.word	0x08005023
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f51 	.word	0x08004f51
 8004f48:	08004fc5 	.word	0x08004fc5
 8004f4c:	08004fd9 	.word	0x08004fd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	18d1      	adds	r1, r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f70:	f7ff ff5c 	bl	8004e2c <prvInsertTimerInActiveList>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d069      	beq.n	800504e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05e      	beq.n	800504e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	441a      	add	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f7ff fe05 	bl	8004bb0 <xTimerGenericCommand>
 8004fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d14f      	bne.n	800504e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61bb      	str	r3, [r7, #24]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004fd6:	e03a      	b.n	800504e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	617b      	str	r3, [r7, #20]
}
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	18d1      	adds	r1, r2, r3
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800501c:	f7ff ff06 	bl	8004e2c <prvInsertTimerInActiveList>
					break;
 8005020:	e015      	b.n	800504e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005032:	f000 fbdd 	bl	80057f0 <vPortFree>
 8005036:	e00a      	b.n	800504e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800504a:	e000      	b.n	800504e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800504c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <prvProcessReceivedCommands+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1d39      	adds	r1, r7, #4
 8005054:	2200      	movs	r2, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fafe 	bl	8003658 <xQueueReceive>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f47f af2a 	bne.w	8004eb8 <prvProcessReceivedCommands+0x8>
	}
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3730      	adds	r7, #48	; 0x30
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000ee4 	.word	0x20000ee4

08005074 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800507a:	e048      	b.n	800510e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <prvSwitchTimerLists+0xc0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005086:	4b2b      	ldr	r3, [pc, #172]	; (8005134 <prvSwitchTimerLists+0xc0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3304      	adds	r3, #4
 8005094:	4618      	mov	r0, r3
 8005096:	f7fd ffdd 	bl	8003054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02e      	beq.n	800510e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d90e      	bls.n	80050e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ce:	4b19      	ldr	r3, [pc, #100]	; (8005134 <prvSwitchTimerLists+0xc0>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7fd ff82 	bl	8002fe2 <vListInsert>
 80050de:	e016      	b.n	800510e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	2100      	movs	r1, #0
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fd60 	bl	8004bb0 <xTimerGenericCommand>
 80050f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	603b      	str	r3, [r7, #0]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <prvSwitchTimerLists+0xc0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1b1      	bne.n	800507c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <prvSwitchTimerLists+0xc0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <prvSwitchTimerLists+0xc4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a04      	ldr	r2, [pc, #16]	; (8005134 <prvSwitchTimerLists+0xc0>)
 8005124:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005126:	4a04      	ldr	r2, [pc, #16]	; (8005138 <prvSwitchTimerLists+0xc4>)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000edc 	.word	0x20000edc
 8005138:	20000ee0 	.word	0x20000ee0

0800513c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005142:	f000 f967 	bl	8005414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d120      	bne.n	8005190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800514e:	4814      	ldr	r0, [pc, #80]	; (80051a0 <prvCheckForValidListAndQueue+0x64>)
 8005150:	f7fd fef6 	bl	8002f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005154:	4813      	ldr	r0, [pc, #76]	; (80051a4 <prvCheckForValidListAndQueue+0x68>)
 8005156:	f7fd fef3 	bl	8002f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <prvCheckForValidListAndQueue+0x6c>)
 800515c:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <prvCheckForValidListAndQueue+0x64>)
 800515e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <prvCheckForValidListAndQueue+0x70>)
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <prvCheckForValidListAndQueue+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <prvCheckForValidListAndQueue+0x74>)
 800516c:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <prvCheckForValidListAndQueue+0x78>)
 800516e:	2110      	movs	r1, #16
 8005170:	200a      	movs	r0, #10
 8005172:	f7fe f801 	bl	8003178 <xQueueGenericCreateStatic>
 8005176:	4603      	mov	r3, r0
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 800517a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	490b      	ldr	r1, [pc, #44]	; (80051b8 <prvCheckForValidListAndQueue+0x7c>)
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe fd10 	bl	8003bb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005190:	f000 f970 	bl	8005474 <vPortExitCritical>
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000ee4 	.word	0x20000ee4
 80051a0:	20000eb4 	.word	0x20000eb4
 80051a4:	20000ec8 	.word	0x20000ec8
 80051a8:	20000edc 	.word	0x20000edc
 80051ac:	20000ee0 	.word	0x20000ee0
 80051b0:	20000f90 	.word	0x20000f90
 80051b4:	20000ef0 	.word	0x20000ef0
 80051b8:	080063f0 	.word	0x080063f0

080051bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b04      	subs	r3, #4
 80051cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3b04      	subs	r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051ec:	4a0c      	ldr	r2, [pc, #48]	; (8005220 <pxPortInitialiseStack+0x64>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3b14      	subs	r3, #20
 80051f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3b04      	subs	r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f06f 0202 	mvn.w	r2, #2
 800520a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b20      	subs	r3, #32
 8005210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005212:	68fb      	ldr	r3, [r7, #12]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	08005225 	.word	0x08005225

08005224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <prvTaskExitError+0x54>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d00a      	beq.n	800524e <prvTaskExitError+0x2a>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	60fb      	str	r3, [r7, #12]
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <prvTaskExitError+0x28>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60bb      	str	r3, [r7, #8]
}
 8005260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005262:	bf00      	nop
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0fc      	beq.n	8005264 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000010 	.word	0x20000010
 800527c:	00000000 	.word	0x00000000

08005280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <pxCurrentTCBConst2>)
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	6808      	ldr	r0, [r1, #0]
 8005286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	f380 8809 	msr	PSP, r0
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8811 	msr	BASEPRI, r0
 800529a:	4770      	bx	lr
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst2>:
 80052a0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052a8:	4808      	ldr	r0, [pc, #32]	; (80052cc <prvPortStartFirstTask+0x24>)
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	6800      	ldr	r0, [r0, #0]
 80052ae:	f380 8808 	msr	MSP, r0
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8814 	msr	CONTROL, r0
 80052ba:	b662      	cpsie	i
 80052bc:	b661      	cpsie	f
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	df00      	svc	0
 80052c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ca:	bf00      	nop
 80052cc:	e000ed08 	.word	0xe000ed08

080052d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052d6:	4b46      	ldr	r3, [pc, #280]	; (80053f0 <xPortStartScheduler+0x120>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a46      	ldr	r2, [pc, #280]	; (80053f4 <xPortStartScheduler+0x124>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10a      	bne.n	80052f6 <xPortStartScheduler+0x26>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	613b      	str	r3, [r7, #16]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052f6:	4b3e      	ldr	r3, [pc, #248]	; (80053f0 <xPortStartScheduler+0x120>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <xPortStartScheduler+0x128>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10a      	bne.n	8005316 <xPortStartScheduler+0x46>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	60fb      	str	r3, [r7, #12]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005316:	4b39      	ldr	r3, [pc, #228]	; (80053fc <xPortStartScheduler+0x12c>)
 8005318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	22ff      	movs	r2, #255	; 0xff
 8005326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <xPortStartScheduler+0x130>)
 800533c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800533e:	4b31      	ldr	r3, [pc, #196]	; (8005404 <xPortStartScheduler+0x134>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005344:	e009      	b.n	800535a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005346:	4b2f      	ldr	r3, [pc, #188]	; (8005404 <xPortStartScheduler+0x134>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3b01      	subs	r3, #1
 800534c:	4a2d      	ldr	r2, [pc, #180]	; (8005404 <xPortStartScheduler+0x134>)
 800534e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d0ef      	beq.n	8005346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005366:	4b27      	ldr	r3, [pc, #156]	; (8005404 <xPortStartScheduler+0x134>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1c3 0307 	rsb	r3, r3, #7
 800536e:	2b04      	cmp	r3, #4
 8005370:	d00a      	beq.n	8005388 <xPortStartScheduler+0xb8>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	60bb      	str	r3, [r7, #8]
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005388:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <xPortStartScheduler+0x134>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <xPortStartScheduler+0x134>)
 8005390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <xPortStartScheduler+0x134>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <xPortStartScheduler+0x134>)
 800539c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <xPortStartScheduler+0x138>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a17      	ldr	r2, [pc, #92]	; (8005408 <xPortStartScheduler+0x138>)
 80053ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <xPortStartScheduler+0x138>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a14      	ldr	r2, [pc, #80]	; (8005408 <xPortStartScheduler+0x138>)
 80053b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053be:	f000 f8dd 	bl	800557c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <xPortStartScheduler+0x13c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053c8:	f000 f8fc 	bl	80055c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <xPortStartScheduler+0x140>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0f      	ldr	r2, [pc, #60]	; (8005410 <xPortStartScheduler+0x140>)
 80053d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053d8:	f7ff ff66 	bl	80052a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053dc:	f7ff f81c 	bl	8004418 <vTaskSwitchContext>
	prvTaskExitError();
 80053e0:	f7ff ff20 	bl	8005224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	e000ed00 	.word	0xe000ed00
 80053f4:	410fc271 	.word	0x410fc271
 80053f8:	410fc270 	.word	0x410fc270
 80053fc:	e000e400 	.word	0xe000e400
 8005400:	20000fe0 	.word	0x20000fe0
 8005404:	20000fe4 	.word	0x20000fe4
 8005408:	e000ed20 	.word	0xe000ed20
 800540c:	20000010 	.word	0x20000010
 8005410:	e000ef34 	.word	0xe000ef34

08005414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	607b      	str	r3, [r7, #4]
}
 800542c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <vPortEnterCritical+0x58>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	4a0d      	ldr	r2, [pc, #52]	; (800546c <vPortEnterCritical+0x58>)
 8005436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <vPortEnterCritical+0x58>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10f      	bne.n	8005460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <vPortEnterCritical+0x5c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <vPortEnterCritical+0x4c>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	603b      	str	r3, [r7, #0]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <vPortEnterCritical+0x4a>
	}
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20000010 	.word	0x20000010
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <vPortExitCritical+0x50>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <vPortExitCritical+0x24>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	607b      	str	r3, [r7, #4]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <vPortExitCritical+0x50>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3b01      	subs	r3, #1
 800549e:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <vPortExitCritical+0x50>)
 80054a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <vPortExitCritical+0x50>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <vPortExitCritical+0x42>
 80054aa:	2300      	movs	r3, #0
 80054ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f383 8811 	msr	BASEPRI, r3
}
 80054b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000010 	.word	0x20000010
	...

080054d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054d0:	f3ef 8009 	mrs	r0, PSP
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4b15      	ldr	r3, [pc, #84]	; (8005530 <pxCurrentTCBConst>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	f01e 0f10 	tst.w	lr, #16
 80054e0:	bf08      	it	eq
 80054e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054f4:	f380 8811 	msr	BASEPRI, r0
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f7fe ff8a 	bl	8004418 <vTaskSwitchContext>
 8005504:	f04f 0000 	mov.w	r0, #0
 8005508:	f380 8811 	msr	BASEPRI, r0
 800550c:	bc09      	pop	{r0, r3}
 800550e:	6819      	ldr	r1, [r3, #0]
 8005510:	6808      	ldr	r0, [r1, #0]
 8005512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005516:	f01e 0f10 	tst.w	lr, #16
 800551a:	bf08      	it	eq
 800551c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005520:	f380 8809 	msr	PSP, r0
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w

08005530 <pxCurrentTCBConst>:
 8005530:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
}
 8005550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005552:	f7fe fea7 	bl	80042a4 <xTaskIncrementTick>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <xPortSysTickHandler+0x40>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vPortSetupTimerInterrupt+0x34>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <vPortSetupTimerInterrupt+0x38>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <vPortSetupTimerInterrupt+0x3c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <vPortSetupTimerInterrupt+0x40>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <vPortSetupTimerInterrupt+0x44>)
 800559a:	3b01      	subs	r3, #1
 800559c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800559e:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <vPortSetupTimerInterrupt+0x34>)
 80055a0:	2207      	movs	r2, #7
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e010 	.word	0xe000e010
 80055b4:	e000e018 	.word	0xe000e018
 80055b8:	20000004 	.word	0x20000004
 80055bc:	10624dd3 	.word	0x10624dd3
 80055c0:	e000e014 	.word	0xe000e014

080055c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055d4 <vPortEnableVFP+0x10>
 80055c8:	6801      	ldr	r1, [r0, #0]
 80055ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055ce:	6001      	str	r1, [r0, #0]
 80055d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055d2:	bf00      	nop
 80055d4:	e000ed88 	.word	0xe000ed88

080055d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055de:	f3ef 8305 	mrs	r3, IPSR
 80055e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d914      	bls.n	8005614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ea:	4a17      	ldr	r2, [pc, #92]	; (8005648 <vPortValidateInterruptPriority+0x70>)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <vPortValidateInterruptPriority+0x74>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	7afa      	ldrb	r2, [r7, #11]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d20a      	bcs.n	8005614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005614:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <vPortValidateInterruptPriority+0x78>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800561c:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <vPortValidateInterruptPriority+0x7c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d90a      	bls.n	800563a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	603b      	str	r3, [r7, #0]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <vPortValidateInterruptPriority+0x60>
	}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000e3f0 	.word	0xe000e3f0
 800564c:	20000fe0 	.word	0x20000fe0
 8005650:	e000ed0c 	.word	0xe000ed0c
 8005654:	20000fe4 	.word	0x20000fe4

08005658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005664:	f7fe fd3e 	bl	80040e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005668:	4b5b      	ldr	r3, [pc, #364]	; (80057d8 <pvPortMalloc+0x180>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005670:	f000 f920 	bl	80058b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005674:	4b59      	ldr	r3, [pc, #356]	; (80057dc <pvPortMalloc+0x184>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 8093 	bne.w	80057a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01d      	beq.n	80056c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005688:	2208      	movs	r2, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d014      	beq.n	80056c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f023 0307 	bic.w	r3, r3, #7
 80056a0:	3308      	adds	r3, #8
 80056a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <pvPortMalloc+0x6c>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	617b      	str	r3, [r7, #20]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d06e      	beq.n	80057a8 <pvPortMalloc+0x150>
 80056ca:	4b45      	ldr	r3, [pc, #276]	; (80057e0 <pvPortMalloc+0x188>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d869      	bhi.n	80057a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056d4:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <pvPortMalloc+0x18c>)
 80056d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056d8:	4b42      	ldr	r3, [pc, #264]	; (80057e4 <pvPortMalloc+0x18c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056de:	e004      	b.n	80056ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d903      	bls.n	80056fc <pvPortMalloc+0xa4>
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f1      	bne.n	80056e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056fc:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <pvPortMalloc+0x180>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005702:	429a      	cmp	r2, r3
 8005704:	d050      	beq.n	80057a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2208      	movs	r2, #8
 800570c:	4413      	add	r3, r2
 800570e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	2308      	movs	r3, #8
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	429a      	cmp	r2, r3
 8005726:	d91f      	bls.n	8005768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <pvPortMalloc+0xf8>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	613b      	str	r3, [r7, #16]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005762:	69b8      	ldr	r0, [r7, #24]
 8005764:	f000 f908 	bl	8005978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <pvPortMalloc+0x188>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <pvPortMalloc+0x188>)
 8005774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005776:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <pvPortMalloc+0x188>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <pvPortMalloc+0x190>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d203      	bcs.n	800578a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005782:	4b17      	ldr	r3, [pc, #92]	; (80057e0 <pvPortMalloc+0x188>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <pvPortMalloc+0x190>)
 8005788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <pvPortMalloc+0x184>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	431a      	orrs	r2, r3
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800579e:	4b13      	ldr	r3, [pc, #76]	; (80057ec <pvPortMalloc+0x194>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	4a11      	ldr	r2, [pc, #68]	; (80057ec <pvPortMalloc+0x194>)
 80057a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057a8:	f7fe fcaa 	bl	8004100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <pvPortMalloc+0x174>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60fb      	str	r3, [r7, #12]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <pvPortMalloc+0x172>
	return pvReturn;
 80057cc:	69fb      	ldr	r3, [r7, #28]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3728      	adds	r7, #40	; 0x28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20004bf0 	.word	0x20004bf0
 80057dc:	20004c04 	.word	0x20004c04
 80057e0:	20004bf4 	.word	0x20004bf4
 80057e4:	20004be8 	.word	0x20004be8
 80057e8:	20004bf8 	.word	0x20004bf8
 80057ec:	20004bfc 	.word	0x20004bfc

080057f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d04d      	beq.n	800589e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005802:	2308      	movs	r3, #8
 8005804:	425b      	negs	r3, r3
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <vPortFree+0xb8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <vPortFree+0x44>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	60fb      	str	r3, [r7, #12]
}
 8005830:	bf00      	nop
 8005832:	e7fe      	b.n	8005832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <vPortFree+0x62>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	60bb      	str	r3, [r7, #8]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <vPortFree+0xb8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01e      	beq.n	800589e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11a      	bne.n	800589e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <vPortFree+0xb8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005878:	f7fe fc34 	bl	80040e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <vPortFree+0xbc>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4413      	add	r3, r2
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <vPortFree+0xbc>)
 8005888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800588a:	6938      	ldr	r0, [r7, #16]
 800588c:	f000 f874 	bl	8005978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <vPortFree+0xc0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <vPortFree+0xc0>)
 8005898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800589a:	f7fe fc31 	bl	8004100 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800589e:	bf00      	nop
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20004c04 	.word	0x20004c04
 80058ac:	20004bf4 	.word	0x20004bf4
 80058b0:	20004c00 	.word	0x20004c00

080058b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058c0:	4b27      	ldr	r3, [pc, #156]	; (8005960 <prvHeapInit+0xac>)
 80058c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3307      	adds	r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <prvHeapInit+0xac>)
 80058e4:	4413      	add	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058ec:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <prvHeapInit+0xb0>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058f2:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <prvHeapInit+0xb0>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4413      	add	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005900:	2208      	movs	r2, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <prvHeapInit+0xb4>)
 8005914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <prvHeapInit+0xb4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <prvHeapInit+0xb4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005934:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <prvHeapInit+0xb4>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a0a      	ldr	r2, [pc, #40]	; (800596c <prvHeapInit+0xb8>)
 8005942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a09      	ldr	r2, [pc, #36]	; (8005970 <prvHeapInit+0xbc>)
 800594a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <prvHeapInit+0xc0>)
 800594e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005952:	601a      	str	r2, [r3, #0]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000fe8 	.word	0x20000fe8
 8005964:	20004be8 	.word	0x20004be8
 8005968:	20004bf0 	.word	0x20004bf0
 800596c:	20004bf8 	.word	0x20004bf8
 8005970:	20004bf4 	.word	0x20004bf4
 8005974:	20004c04 	.word	0x20004c04

08005978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005980:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <prvInsertBlockIntoFreeList+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e002      	b.n	800598c <prvInsertBlockIntoFreeList+0x14>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d8f7      	bhi.n	8005986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4413      	add	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d108      	bne.n	80059ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	441a      	add	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	441a      	add	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d118      	bne.n	8005a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <prvInsertBlockIntoFreeList+0xb0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d00d      	beq.n	80059f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e008      	b.n	8005a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvInsertBlockIntoFreeList+0xb0>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e003      	b.n	8005a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d002      	beq.n	8005a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20004be8 	.word	0x20004be8
 8005a28:	20004bf0 	.word	0x20004bf0

08005a2c <__errno>:
 8005a2c:	4b01      	ldr	r3, [pc, #4]	; (8005a34 <__errno+0x8>)
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000014 	.word	0x20000014

08005a38 <__libc_init_array>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	4d0d      	ldr	r5, [pc, #52]	; (8005a70 <__libc_init_array+0x38>)
 8005a3c:	4c0d      	ldr	r4, [pc, #52]	; (8005a74 <__libc_init_array+0x3c>)
 8005a3e:	1b64      	subs	r4, r4, r5
 8005a40:	10a4      	asrs	r4, r4, #2
 8005a42:	2600      	movs	r6, #0
 8005a44:	42a6      	cmp	r6, r4
 8005a46:	d109      	bne.n	8005a5c <__libc_init_array+0x24>
 8005a48:	4d0b      	ldr	r5, [pc, #44]	; (8005a78 <__libc_init_array+0x40>)
 8005a4a:	4c0c      	ldr	r4, [pc, #48]	; (8005a7c <__libc_init_array+0x44>)
 8005a4c:	f000 fc4e 	bl	80062ec <_init>
 8005a50:	1b64      	subs	r4, r4, r5
 8005a52:	10a4      	asrs	r4, r4, #2
 8005a54:	2600      	movs	r6, #0
 8005a56:	42a6      	cmp	r6, r4
 8005a58:	d105      	bne.n	8005a66 <__libc_init_array+0x2e>
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a60:	4798      	blx	r3
 8005a62:	3601      	adds	r6, #1
 8005a64:	e7ee      	b.n	8005a44 <__libc_init_array+0xc>
 8005a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6a:	4798      	blx	r3
 8005a6c:	3601      	adds	r6, #1
 8005a6e:	e7f2      	b.n	8005a56 <__libc_init_array+0x1e>
 8005a70:	08006500 	.word	0x08006500
 8005a74:	08006500 	.word	0x08006500
 8005a78:	08006500 	.word	0x08006500
 8005a7c:	08006504 	.word	0x08006504

08005a80 <memcpy>:
 8005a80:	440a      	add	r2, r1
 8005a82:	4291      	cmp	r1, r2
 8005a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a88:	d100      	bne.n	8005a8c <memcpy+0xc>
 8005a8a:	4770      	bx	lr
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a96:	4291      	cmp	r1, r2
 8005a98:	d1f9      	bne.n	8005a8e <memcpy+0xe>
 8005a9a:	bd10      	pop	{r4, pc}

08005a9c <memset>:
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <_vsiprintf_r>:
 8005aac:	b500      	push	{lr}
 8005aae:	b09b      	sub	sp, #108	; 0x6c
 8005ab0:	9100      	str	r1, [sp, #0]
 8005ab2:	9104      	str	r1, [sp, #16]
 8005ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab8:	9105      	str	r1, [sp, #20]
 8005aba:	9102      	str	r1, [sp, #8]
 8005abc:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <_vsiprintf_r+0x28>)
 8005abe:	9103      	str	r1, [sp, #12]
 8005ac0:	4669      	mov	r1, sp
 8005ac2:	f000 f86f 	bl	8005ba4 <_svfiprintf_r>
 8005ac6:	9b00      	ldr	r3, [sp, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	b01b      	add	sp, #108	; 0x6c
 8005ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ad2:	bf00      	nop
 8005ad4:	ffff0208 	.word	0xffff0208

08005ad8 <vsiprintf>:
 8005ad8:	4613      	mov	r3, r2
 8005ada:	460a      	mov	r2, r1
 8005adc:	4601      	mov	r1, r0
 8005ade:	4802      	ldr	r0, [pc, #8]	; (8005ae8 <vsiprintf+0x10>)
 8005ae0:	6800      	ldr	r0, [r0, #0]
 8005ae2:	f7ff bfe3 	b.w	8005aac <_vsiprintf_r>
 8005ae6:	bf00      	nop
 8005ae8:	20000014 	.word	0x20000014

08005aec <__ssputs_r>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	688e      	ldr	r6, [r1, #8]
 8005af2:	429e      	cmp	r6, r3
 8005af4:	4682      	mov	sl, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	4690      	mov	r8, r2
 8005afa:	461f      	mov	r7, r3
 8005afc:	d838      	bhi.n	8005b70 <__ssputs_r+0x84>
 8005afe:	898a      	ldrh	r2, [r1, #12]
 8005b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b04:	d032      	beq.n	8005b6c <__ssputs_r+0x80>
 8005b06:	6825      	ldr	r5, [r4, #0]
 8005b08:	6909      	ldr	r1, [r1, #16]
 8005b0a:	eba5 0901 	sub.w	r9, r5, r1
 8005b0e:	6965      	ldr	r5, [r4, #20]
 8005b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b18:	3301      	adds	r3, #1
 8005b1a:	444b      	add	r3, r9
 8005b1c:	106d      	asrs	r5, r5, #1
 8005b1e:	429d      	cmp	r5, r3
 8005b20:	bf38      	it	cc
 8005b22:	461d      	movcc	r5, r3
 8005b24:	0553      	lsls	r3, r2, #21
 8005b26:	d531      	bpl.n	8005b8c <__ssputs_r+0xa0>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f000 fb39 	bl	80061a0 <_malloc_r>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	b950      	cbnz	r0, 8005b48 <__ssputs_r+0x5c>
 8005b32:	230c      	movs	r3, #12
 8005b34:	f8ca 3000 	str.w	r3, [sl]
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	6921      	ldr	r1, [r4, #16]
 8005b4a:	464a      	mov	r2, r9
 8005b4c:	f7ff ff98 	bl	8005a80 <memcpy>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	6126      	str	r6, [r4, #16]
 8005b5e:	6165      	str	r5, [r4, #20]
 8005b60:	444e      	add	r6, r9
 8005b62:	eba5 0509 	sub.w	r5, r5, r9
 8005b66:	6026      	str	r6, [r4, #0]
 8005b68:	60a5      	str	r5, [r4, #8]
 8005b6a:	463e      	mov	r6, r7
 8005b6c:	42be      	cmp	r6, r7
 8005b6e:	d900      	bls.n	8005b72 <__ssputs_r+0x86>
 8005b70:	463e      	mov	r6, r7
 8005b72:	4632      	mov	r2, r6
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	4641      	mov	r1, r8
 8005b78:	f000 faa8 	bl	80060cc <memmove>
 8005b7c:	68a3      	ldr	r3, [r4, #8]
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	1b9b      	subs	r3, r3, r6
 8005b82:	4432      	add	r2, r6
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	6022      	str	r2, [r4, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e7db      	b.n	8005b44 <__ssputs_r+0x58>
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	f000 fb61 	bl	8006254 <_realloc_r>
 8005b92:	4606      	mov	r6, r0
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d1e1      	bne.n	8005b5c <__ssputs_r+0x70>
 8005b98:	6921      	ldr	r1, [r4, #16]
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f000 fab0 	bl	8006100 <_free_r>
 8005ba0:	e7c7      	b.n	8005b32 <__ssputs_r+0x46>
	...

08005ba4 <_svfiprintf_r>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	4698      	mov	r8, r3
 8005baa:	898b      	ldrh	r3, [r1, #12]
 8005bac:	061b      	lsls	r3, r3, #24
 8005bae:	b09d      	sub	sp, #116	; 0x74
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	d50e      	bpl.n	8005bd6 <_svfiprintf_r+0x32>
 8005bb8:	690b      	ldr	r3, [r1, #16]
 8005bba:	b963      	cbnz	r3, 8005bd6 <_svfiprintf_r+0x32>
 8005bbc:	2140      	movs	r1, #64	; 0x40
 8005bbe:	f000 faef 	bl	80061a0 <_malloc_r>
 8005bc2:	6028      	str	r0, [r5, #0]
 8005bc4:	6128      	str	r0, [r5, #16]
 8005bc6:	b920      	cbnz	r0, 8005bd2 <_svfiprintf_r+0x2e>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e0d1      	b.n	8005d76 <_svfiprintf_r+0x1d2>
 8005bd2:	2340      	movs	r3, #64	; 0x40
 8005bd4:	616b      	str	r3, [r5, #20]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bda:	2320      	movs	r3, #32
 8005bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be4:	2330      	movs	r3, #48	; 0x30
 8005be6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d90 <_svfiprintf_r+0x1ec>
 8005bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bee:	f04f 0901 	mov.w	r9, #1
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	469a      	mov	sl, r3
 8005bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bfa:	b10a      	cbz	r2, 8005c00 <_svfiprintf_r+0x5c>
 8005bfc:	2a25      	cmp	r2, #37	; 0x25
 8005bfe:	d1f9      	bne.n	8005bf4 <_svfiprintf_r+0x50>
 8005c00:	ebba 0b04 	subs.w	fp, sl, r4
 8005c04:	d00b      	beq.n	8005c1e <_svfiprintf_r+0x7a>
 8005c06:	465b      	mov	r3, fp
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	f7ff ff6d 	bl	8005aec <__ssputs_r>
 8005c12:	3001      	adds	r0, #1
 8005c14:	f000 80aa 	beq.w	8005d6c <_svfiprintf_r+0x1c8>
 8005c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c1a:	445a      	add	r2, fp
 8005c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80a2 	beq.w	8005d6c <_svfiprintf_r+0x1c8>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c32:	f10a 0a01 	add.w	sl, sl, #1
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	9307      	str	r3, [sp, #28]
 8005c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c40:	4654      	mov	r4, sl
 8005c42:	2205      	movs	r2, #5
 8005c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c48:	4851      	ldr	r0, [pc, #324]	; (8005d90 <_svfiprintf_r+0x1ec>)
 8005c4a:	f7fa fac9 	bl	80001e0 <memchr>
 8005c4e:	9a04      	ldr	r2, [sp, #16]
 8005c50:	b9d8      	cbnz	r0, 8005c8a <_svfiprintf_r+0xe6>
 8005c52:	06d0      	lsls	r0, r2, #27
 8005c54:	bf44      	itt	mi
 8005c56:	2320      	movmi	r3, #32
 8005c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c5c:	0711      	lsls	r1, r2, #28
 8005c5e:	bf44      	itt	mi
 8005c60:	232b      	movmi	r3, #43	; 0x2b
 8005c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c66:	f89a 3000 	ldrb.w	r3, [sl]
 8005c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6c:	d015      	beq.n	8005c9a <_svfiprintf_r+0xf6>
 8005c6e:	9a07      	ldr	r2, [sp, #28]
 8005c70:	4654      	mov	r4, sl
 8005c72:	2000      	movs	r0, #0
 8005c74:	f04f 0c0a 	mov.w	ip, #10
 8005c78:	4621      	mov	r1, r4
 8005c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c7e:	3b30      	subs	r3, #48	; 0x30
 8005c80:	2b09      	cmp	r3, #9
 8005c82:	d94e      	bls.n	8005d22 <_svfiprintf_r+0x17e>
 8005c84:	b1b0      	cbz	r0, 8005cb4 <_svfiprintf_r+0x110>
 8005c86:	9207      	str	r2, [sp, #28]
 8005c88:	e014      	b.n	8005cb4 <_svfiprintf_r+0x110>
 8005c8a:	eba0 0308 	sub.w	r3, r0, r8
 8005c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c92:	4313      	orrs	r3, r2
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	46a2      	mov	sl, r4
 8005c98:	e7d2      	b.n	8005c40 <_svfiprintf_r+0x9c>
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	1d19      	adds	r1, r3, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	9103      	str	r1, [sp, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bfbb      	ittet	lt
 8005ca6:	425b      	neglt	r3, r3
 8005ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8005cac:	9307      	strge	r3, [sp, #28]
 8005cae:	9307      	strlt	r3, [sp, #28]
 8005cb0:	bfb8      	it	lt
 8005cb2:	9204      	strlt	r2, [sp, #16]
 8005cb4:	7823      	ldrb	r3, [r4, #0]
 8005cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb8:	d10c      	bne.n	8005cd4 <_svfiprintf_r+0x130>
 8005cba:	7863      	ldrb	r3, [r4, #1]
 8005cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cbe:	d135      	bne.n	8005d2c <_svfiprintf_r+0x188>
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	9203      	str	r2, [sp, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfb8      	it	lt
 8005ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cd0:	3402      	adds	r4, #2
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005da0 <_svfiprintf_r+0x1fc>
 8005cd8:	7821      	ldrb	r1, [r4, #0]
 8005cda:	2203      	movs	r2, #3
 8005cdc:	4650      	mov	r0, sl
 8005cde:	f7fa fa7f 	bl	80001e0 <memchr>
 8005ce2:	b140      	cbz	r0, 8005cf6 <_svfiprintf_r+0x152>
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	eba0 000a 	sub.w	r0, r0, sl
 8005cea:	fa03 f000 	lsl.w	r0, r3, r0
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	4303      	orrs	r3, r0
 8005cf2:	3401      	adds	r4, #1
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfa:	4826      	ldr	r0, [pc, #152]	; (8005d94 <_svfiprintf_r+0x1f0>)
 8005cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d00:	2206      	movs	r2, #6
 8005d02:	f7fa fa6d 	bl	80001e0 <memchr>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d038      	beq.n	8005d7c <_svfiprintf_r+0x1d8>
 8005d0a:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <_svfiprintf_r+0x1f4>)
 8005d0c:	bb1b      	cbnz	r3, 8005d56 <_svfiprintf_r+0x1b2>
 8005d0e:	9b03      	ldr	r3, [sp, #12]
 8005d10:	3307      	adds	r3, #7
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	3308      	adds	r3, #8
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1c:	4433      	add	r3, r6
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d20:	e767      	b.n	8005bf2 <_svfiprintf_r+0x4e>
 8005d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d26:	460c      	mov	r4, r1
 8005d28:	2001      	movs	r0, #1
 8005d2a:	e7a5      	b.n	8005c78 <_svfiprintf_r+0xd4>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	3401      	adds	r4, #1
 8005d30:	9305      	str	r3, [sp, #20]
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 0c0a 	mov.w	ip, #10
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d3e:	3a30      	subs	r2, #48	; 0x30
 8005d40:	2a09      	cmp	r2, #9
 8005d42:	d903      	bls.n	8005d4c <_svfiprintf_r+0x1a8>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0c5      	beq.n	8005cd4 <_svfiprintf_r+0x130>
 8005d48:	9105      	str	r1, [sp, #20]
 8005d4a:	e7c3      	b.n	8005cd4 <_svfiprintf_r+0x130>
 8005d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d50:	4604      	mov	r4, r0
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7f0      	b.n	8005d38 <_svfiprintf_r+0x194>
 8005d56:	ab03      	add	r3, sp, #12
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <_svfiprintf_r+0x1f8>)
 8005d5e:	a904      	add	r1, sp, #16
 8005d60:	4638      	mov	r0, r7
 8005d62:	f3af 8000 	nop.w
 8005d66:	1c42      	adds	r2, r0, #1
 8005d68:	4606      	mov	r6, r0
 8005d6a:	d1d6      	bne.n	8005d1a <_svfiprintf_r+0x176>
 8005d6c:	89ab      	ldrh	r3, [r5, #12]
 8005d6e:	065b      	lsls	r3, r3, #25
 8005d70:	f53f af2c 	bmi.w	8005bcc <_svfiprintf_r+0x28>
 8005d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d76:	b01d      	add	sp, #116	; 0x74
 8005d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7c:	ab03      	add	r3, sp, #12
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	462a      	mov	r2, r5
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <_svfiprintf_r+0x1f8>)
 8005d84:	a904      	add	r1, sp, #16
 8005d86:	4638      	mov	r0, r7
 8005d88:	f000 f87a 	bl	8005e80 <_printf_i>
 8005d8c:	e7eb      	b.n	8005d66 <_svfiprintf_r+0x1c2>
 8005d8e:	bf00      	nop
 8005d90:	080064c4 	.word	0x080064c4
 8005d94:	080064ce 	.word	0x080064ce
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	08005aed 	.word	0x08005aed
 8005da0:	080064ca 	.word	0x080064ca

08005da4 <_printf_common>:
 8005da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	4616      	mov	r6, r2
 8005daa:	4699      	mov	r9, r3
 8005dac:	688a      	ldr	r2, [r1, #8]
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bfb8      	it	lt
 8005db8:	4613      	movlt	r3, r2
 8005dba:	6033      	str	r3, [r6, #0]
 8005dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b10a      	cbz	r2, 8005dca <_printf_common+0x26>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	0699      	lsls	r1, r3, #26
 8005dce:	bf42      	ittt	mi
 8005dd0:	6833      	ldrmi	r3, [r6, #0]
 8005dd2:	3302      	addmi	r3, #2
 8005dd4:	6033      	strmi	r3, [r6, #0]
 8005dd6:	6825      	ldr	r5, [r4, #0]
 8005dd8:	f015 0506 	ands.w	r5, r5, #6
 8005ddc:	d106      	bne.n	8005dec <_printf_common+0x48>
 8005dde:	f104 0a19 	add.w	sl, r4, #25
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	6832      	ldr	r2, [r6, #0]
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc26      	bgt.n	8005e3a <_printf_common+0x96>
 8005dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005df0:	1e13      	subs	r3, r2, #0
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	bf18      	it	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	0692      	lsls	r2, r2, #26
 8005dfa:	d42b      	bmi.n	8005e54 <_printf_common+0xb0>
 8005dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e00:	4649      	mov	r1, r9
 8005e02:	4638      	mov	r0, r7
 8005e04:	47c0      	blx	r8
 8005e06:	3001      	adds	r0, #1
 8005e08:	d01e      	beq.n	8005e48 <_printf_common+0xa4>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	68e5      	ldr	r5, [r4, #12]
 8005e0e:	6832      	ldr	r2, [r6, #0]
 8005e10:	f003 0306 	and.w	r3, r3, #6
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	bf08      	it	eq
 8005e18:	1aad      	subeq	r5, r5, r2
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	6922      	ldr	r2, [r4, #16]
 8005e1e:	bf0c      	ite	eq
 8005e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e24:	2500      	movne	r5, #0
 8005e26:	4293      	cmp	r3, r2
 8005e28:	bfc4      	itt	gt
 8005e2a:	1a9b      	subgt	r3, r3, r2
 8005e2c:	18ed      	addgt	r5, r5, r3
 8005e2e:	2600      	movs	r6, #0
 8005e30:	341a      	adds	r4, #26
 8005e32:	42b5      	cmp	r5, r6
 8005e34:	d11a      	bne.n	8005e6c <_printf_common+0xc8>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e008      	b.n	8005e4c <_printf_common+0xa8>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4638      	mov	r0, r7
 8005e42:	47c0      	blx	r8
 8005e44:	3001      	adds	r0, #1
 8005e46:	d103      	bne.n	8005e50 <_printf_common+0xac>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	3501      	adds	r5, #1
 8005e52:	e7c6      	b.n	8005de2 <_printf_common+0x3e>
 8005e54:	18e1      	adds	r1, r4, r3
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	2030      	movs	r0, #48	; 0x30
 8005e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e5e:	4422      	add	r2, r4
 8005e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e68:	3302      	adds	r3, #2
 8005e6a:	e7c7      	b.n	8005dfc <_printf_common+0x58>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4622      	mov	r2, r4
 8005e70:	4649      	mov	r1, r9
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c0      	blx	r8
 8005e76:	3001      	adds	r0, #1
 8005e78:	d0e6      	beq.n	8005e48 <_printf_common+0xa4>
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7d9      	b.n	8005e32 <_printf_common+0x8e>
	...

08005e80 <_printf_i>:
 8005e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	460c      	mov	r4, r1
 8005e86:	4691      	mov	r9, r2
 8005e88:	7e27      	ldrb	r7, [r4, #24]
 8005e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e8c:	2f78      	cmp	r7, #120	; 0x78
 8005e8e:	4680      	mov	r8, r0
 8005e90:	469a      	mov	sl, r3
 8005e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e96:	d807      	bhi.n	8005ea8 <_printf_i+0x28>
 8005e98:	2f62      	cmp	r7, #98	; 0x62
 8005e9a:	d80a      	bhi.n	8005eb2 <_printf_i+0x32>
 8005e9c:	2f00      	cmp	r7, #0
 8005e9e:	f000 80d8 	beq.w	8006052 <_printf_i+0x1d2>
 8005ea2:	2f58      	cmp	r7, #88	; 0x58
 8005ea4:	f000 80a3 	beq.w	8005fee <_printf_i+0x16e>
 8005ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eb0:	e03a      	b.n	8005f28 <_printf_i+0xa8>
 8005eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eb6:	2b15      	cmp	r3, #21
 8005eb8:	d8f6      	bhi.n	8005ea8 <_printf_i+0x28>
 8005eba:	a001      	add	r0, pc, #4	; (adr r0, 8005ec0 <_printf_i+0x40>)
 8005ebc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ec0:	08005f19 	.word	0x08005f19
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005ea9 	.word	0x08005ea9
 8005ecc:	08005ea9 	.word	0x08005ea9
 8005ed0:	08005ea9 	.word	0x08005ea9
 8005ed4:	08005ea9 	.word	0x08005ea9
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005ea9 	.word	0x08005ea9
 8005ee0:	08005ea9 	.word	0x08005ea9
 8005ee4:	08005ea9 	.word	0x08005ea9
 8005ee8:	08005ea9 	.word	0x08005ea9
 8005eec:	08006039 	.word	0x08006039
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	0800601b 	.word	0x0800601b
 8005ef8:	08005ea9 	.word	0x08005ea9
 8005efc:	08005ea9 	.word	0x08005ea9
 8005f00:	0800605b 	.word	0x0800605b
 8005f04:	08005ea9 	.word	0x08005ea9
 8005f08:	08005f5d 	.word	0x08005f5d
 8005f0c:	08005ea9 	.word	0x08005ea9
 8005f10:	08005ea9 	.word	0x08005ea9
 8005f14:	08006023 	.word	0x08006023
 8005f18:	680b      	ldr	r3, [r1, #0]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	600a      	str	r2, [r1, #0]
 8005f20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0a3      	b.n	8006074 <_printf_i+0x1f4>
 8005f2c:	6825      	ldr	r5, [r4, #0]
 8005f2e:	6808      	ldr	r0, [r1, #0]
 8005f30:	062e      	lsls	r6, r5, #24
 8005f32:	f100 0304 	add.w	r3, r0, #4
 8005f36:	d50a      	bpl.n	8005f4e <_printf_i+0xce>
 8005f38:	6805      	ldr	r5, [r0, #0]
 8005f3a:	600b      	str	r3, [r1, #0]
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	da03      	bge.n	8005f48 <_printf_i+0xc8>
 8005f40:	232d      	movs	r3, #45	; 0x2d
 8005f42:	426d      	negs	r5, r5
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f48:	485e      	ldr	r0, [pc, #376]	; (80060c4 <_printf_i+0x244>)
 8005f4a:	230a      	movs	r3, #10
 8005f4c:	e019      	b.n	8005f82 <_printf_i+0x102>
 8005f4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f52:	6805      	ldr	r5, [r0, #0]
 8005f54:	600b      	str	r3, [r1, #0]
 8005f56:	bf18      	it	ne
 8005f58:	b22d      	sxthne	r5, r5
 8005f5a:	e7ef      	b.n	8005f3c <_printf_i+0xbc>
 8005f5c:	680b      	ldr	r3, [r1, #0]
 8005f5e:	6825      	ldr	r5, [r4, #0]
 8005f60:	1d18      	adds	r0, r3, #4
 8005f62:	6008      	str	r0, [r1, #0]
 8005f64:	0628      	lsls	r0, r5, #24
 8005f66:	d501      	bpl.n	8005f6c <_printf_i+0xec>
 8005f68:	681d      	ldr	r5, [r3, #0]
 8005f6a:	e002      	b.n	8005f72 <_printf_i+0xf2>
 8005f6c:	0669      	lsls	r1, r5, #25
 8005f6e:	d5fb      	bpl.n	8005f68 <_printf_i+0xe8>
 8005f70:	881d      	ldrh	r5, [r3, #0]
 8005f72:	4854      	ldr	r0, [pc, #336]	; (80060c4 <_printf_i+0x244>)
 8005f74:	2f6f      	cmp	r7, #111	; 0x6f
 8005f76:	bf0c      	ite	eq
 8005f78:	2308      	moveq	r3, #8
 8005f7a:	230a      	movne	r3, #10
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f82:	6866      	ldr	r6, [r4, #4]
 8005f84:	60a6      	str	r6, [r4, #8]
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	bfa2      	ittt	ge
 8005f8a:	6821      	ldrge	r1, [r4, #0]
 8005f8c:	f021 0104 	bicge.w	r1, r1, #4
 8005f90:	6021      	strge	r1, [r4, #0]
 8005f92:	b90d      	cbnz	r5, 8005f98 <_printf_i+0x118>
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	d04d      	beq.n	8006034 <_printf_i+0x1b4>
 8005f98:	4616      	mov	r6, r2
 8005f9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f9e:	fb03 5711 	mls	r7, r3, r1, r5
 8005fa2:	5dc7      	ldrb	r7, [r0, r7]
 8005fa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fa8:	462f      	mov	r7, r5
 8005faa:	42bb      	cmp	r3, r7
 8005fac:	460d      	mov	r5, r1
 8005fae:	d9f4      	bls.n	8005f9a <_printf_i+0x11a>
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d10b      	bne.n	8005fcc <_printf_i+0x14c>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	07df      	lsls	r7, r3, #31
 8005fb8:	d508      	bpl.n	8005fcc <_printf_i+0x14c>
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	6861      	ldr	r1, [r4, #4]
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	bfde      	ittt	le
 8005fc2:	2330      	movle	r3, #48	; 0x30
 8005fc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fcc:	1b92      	subs	r2, r2, r6
 8005fce:	6122      	str	r2, [r4, #16]
 8005fd0:	f8cd a000 	str.w	sl, [sp]
 8005fd4:	464b      	mov	r3, r9
 8005fd6:	aa03      	add	r2, sp, #12
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f7ff fee2 	bl	8005da4 <_printf_common>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d14c      	bne.n	800607e <_printf_i+0x1fe>
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe8:	b004      	add	sp, #16
 8005fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fee:	4835      	ldr	r0, [pc, #212]	; (80060c4 <_printf_i+0x244>)
 8005ff0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	680e      	ldr	r6, [r1, #0]
 8005ff8:	061f      	lsls	r7, r3, #24
 8005ffa:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ffe:	600e      	str	r6, [r1, #0]
 8006000:	d514      	bpl.n	800602c <_printf_i+0x1ac>
 8006002:	07d9      	lsls	r1, r3, #31
 8006004:	bf44      	itt	mi
 8006006:	f043 0320 	orrmi.w	r3, r3, #32
 800600a:	6023      	strmi	r3, [r4, #0]
 800600c:	b91d      	cbnz	r5, 8006016 <_printf_i+0x196>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	f023 0320 	bic.w	r3, r3, #32
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	2310      	movs	r3, #16
 8006018:	e7b0      	b.n	8005f7c <_printf_i+0xfc>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	f043 0320 	orr.w	r3, r3, #32
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	2378      	movs	r3, #120	; 0x78
 8006024:	4828      	ldr	r0, [pc, #160]	; (80060c8 <_printf_i+0x248>)
 8006026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800602a:	e7e3      	b.n	8005ff4 <_printf_i+0x174>
 800602c:	065e      	lsls	r6, r3, #25
 800602e:	bf48      	it	mi
 8006030:	b2ad      	uxthmi	r5, r5
 8006032:	e7e6      	b.n	8006002 <_printf_i+0x182>
 8006034:	4616      	mov	r6, r2
 8006036:	e7bb      	b.n	8005fb0 <_printf_i+0x130>
 8006038:	680b      	ldr	r3, [r1, #0]
 800603a:	6826      	ldr	r6, [r4, #0]
 800603c:	6960      	ldr	r0, [r4, #20]
 800603e:	1d1d      	adds	r5, r3, #4
 8006040:	600d      	str	r5, [r1, #0]
 8006042:	0635      	lsls	r5, r6, #24
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	d501      	bpl.n	800604c <_printf_i+0x1cc>
 8006048:	6018      	str	r0, [r3, #0]
 800604a:	e002      	b.n	8006052 <_printf_i+0x1d2>
 800604c:	0671      	lsls	r1, r6, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0x1c8>
 8006050:	8018      	strh	r0, [r3, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	4616      	mov	r6, r2
 8006058:	e7ba      	b.n	8005fd0 <_printf_i+0x150>
 800605a:	680b      	ldr	r3, [r1, #0]
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	600a      	str	r2, [r1, #0]
 8006060:	681e      	ldr	r6, [r3, #0]
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	2100      	movs	r1, #0
 8006066:	4630      	mov	r0, r6
 8006068:	f7fa f8ba 	bl	80001e0 <memchr>
 800606c:	b108      	cbz	r0, 8006072 <_printf_i+0x1f2>
 800606e:	1b80      	subs	r0, r0, r6
 8006070:	6060      	str	r0, [r4, #4]
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	2300      	movs	r3, #0
 8006078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800607c:	e7a8      	b.n	8005fd0 <_printf_i+0x150>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	4632      	mov	r2, r6
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d0ab      	beq.n	8005fe4 <_printf_i+0x164>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	079b      	lsls	r3, r3, #30
 8006090:	d413      	bmi.n	80060ba <_printf_i+0x23a>
 8006092:	68e0      	ldr	r0, [r4, #12]
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	4298      	cmp	r0, r3
 8006098:	bfb8      	it	lt
 800609a:	4618      	movlt	r0, r3
 800609c:	e7a4      	b.n	8005fe8 <_printf_i+0x168>
 800609e:	2301      	movs	r3, #1
 80060a0:	4632      	mov	r2, r6
 80060a2:	4649      	mov	r1, r9
 80060a4:	4640      	mov	r0, r8
 80060a6:	47d0      	blx	sl
 80060a8:	3001      	adds	r0, #1
 80060aa:	d09b      	beq.n	8005fe4 <_printf_i+0x164>
 80060ac:	3501      	adds	r5, #1
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	9903      	ldr	r1, [sp, #12]
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	dcf2      	bgt.n	800609e <_printf_i+0x21e>
 80060b8:	e7eb      	b.n	8006092 <_printf_i+0x212>
 80060ba:	2500      	movs	r5, #0
 80060bc:	f104 0619 	add.w	r6, r4, #25
 80060c0:	e7f5      	b.n	80060ae <_printf_i+0x22e>
 80060c2:	bf00      	nop
 80060c4:	080064d5 	.word	0x080064d5
 80060c8:	080064e6 	.word	0x080064e6

080060cc <memmove>:
 80060cc:	4288      	cmp	r0, r1
 80060ce:	b510      	push	{r4, lr}
 80060d0:	eb01 0402 	add.w	r4, r1, r2
 80060d4:	d902      	bls.n	80060dc <memmove+0x10>
 80060d6:	4284      	cmp	r4, r0
 80060d8:	4623      	mov	r3, r4
 80060da:	d807      	bhi.n	80060ec <memmove+0x20>
 80060dc:	1e43      	subs	r3, r0, #1
 80060de:	42a1      	cmp	r1, r4
 80060e0:	d008      	beq.n	80060f4 <memmove+0x28>
 80060e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ea:	e7f8      	b.n	80060de <memmove+0x12>
 80060ec:	4402      	add	r2, r0
 80060ee:	4601      	mov	r1, r0
 80060f0:	428a      	cmp	r2, r1
 80060f2:	d100      	bne.n	80060f6 <memmove+0x2a>
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060fe:	e7f7      	b.n	80060f0 <memmove+0x24>

08006100 <_free_r>:
 8006100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006102:	2900      	cmp	r1, #0
 8006104:	d048      	beq.n	8006198 <_free_r+0x98>
 8006106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610a:	9001      	str	r0, [sp, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f1a1 0404 	sub.w	r4, r1, #4
 8006112:	bfb8      	it	lt
 8006114:	18e4      	addlt	r4, r4, r3
 8006116:	f000 f8d3 	bl	80062c0 <__malloc_lock>
 800611a:	4a20      	ldr	r2, [pc, #128]	; (800619c <_free_r+0x9c>)
 800611c:	9801      	ldr	r0, [sp, #4]
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	4615      	mov	r5, r2
 8006122:	b933      	cbnz	r3, 8006132 <_free_r+0x32>
 8006124:	6063      	str	r3, [r4, #4]
 8006126:	6014      	str	r4, [r2, #0]
 8006128:	b003      	add	sp, #12
 800612a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800612e:	f000 b8cd 	b.w	80062cc <__malloc_unlock>
 8006132:	42a3      	cmp	r3, r4
 8006134:	d90b      	bls.n	800614e <_free_r+0x4e>
 8006136:	6821      	ldr	r1, [r4, #0]
 8006138:	1862      	adds	r2, r4, r1
 800613a:	4293      	cmp	r3, r2
 800613c:	bf04      	itt	eq
 800613e:	681a      	ldreq	r2, [r3, #0]
 8006140:	685b      	ldreq	r3, [r3, #4]
 8006142:	6063      	str	r3, [r4, #4]
 8006144:	bf04      	itt	eq
 8006146:	1852      	addeq	r2, r2, r1
 8006148:	6022      	streq	r2, [r4, #0]
 800614a:	602c      	str	r4, [r5, #0]
 800614c:	e7ec      	b.n	8006128 <_free_r+0x28>
 800614e:	461a      	mov	r2, r3
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b10b      	cbz	r3, 8006158 <_free_r+0x58>
 8006154:	42a3      	cmp	r3, r4
 8006156:	d9fa      	bls.n	800614e <_free_r+0x4e>
 8006158:	6811      	ldr	r1, [r2, #0]
 800615a:	1855      	adds	r5, r2, r1
 800615c:	42a5      	cmp	r5, r4
 800615e:	d10b      	bne.n	8006178 <_free_r+0x78>
 8006160:	6824      	ldr	r4, [r4, #0]
 8006162:	4421      	add	r1, r4
 8006164:	1854      	adds	r4, r2, r1
 8006166:	42a3      	cmp	r3, r4
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	d1dd      	bne.n	8006128 <_free_r+0x28>
 800616c:	681c      	ldr	r4, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	6053      	str	r3, [r2, #4]
 8006172:	4421      	add	r1, r4
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	e7d7      	b.n	8006128 <_free_r+0x28>
 8006178:	d902      	bls.n	8006180 <_free_r+0x80>
 800617a:	230c      	movs	r3, #12
 800617c:	6003      	str	r3, [r0, #0]
 800617e:	e7d3      	b.n	8006128 <_free_r+0x28>
 8006180:	6825      	ldr	r5, [r4, #0]
 8006182:	1961      	adds	r1, r4, r5
 8006184:	428b      	cmp	r3, r1
 8006186:	bf04      	itt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	bf04      	itt	eq
 8006190:	1949      	addeq	r1, r1, r5
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	6054      	str	r4, [r2, #4]
 8006196:	e7c7      	b.n	8006128 <_free_r+0x28>
 8006198:	b003      	add	sp, #12
 800619a:	bd30      	pop	{r4, r5, pc}
 800619c:	20004c08 	.word	0x20004c08

080061a0 <_malloc_r>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	1ccd      	adds	r5, r1, #3
 80061a4:	f025 0503 	bic.w	r5, r5, #3
 80061a8:	3508      	adds	r5, #8
 80061aa:	2d0c      	cmp	r5, #12
 80061ac:	bf38      	it	cc
 80061ae:	250c      	movcc	r5, #12
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	4606      	mov	r6, r0
 80061b4:	db01      	blt.n	80061ba <_malloc_r+0x1a>
 80061b6:	42a9      	cmp	r1, r5
 80061b8:	d903      	bls.n	80061c2 <_malloc_r+0x22>
 80061ba:	230c      	movs	r3, #12
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	2000      	movs	r0, #0
 80061c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c2:	f000 f87d 	bl	80062c0 <__malloc_lock>
 80061c6:	4921      	ldr	r1, [pc, #132]	; (800624c <_malloc_r+0xac>)
 80061c8:	680a      	ldr	r2, [r1, #0]
 80061ca:	4614      	mov	r4, r2
 80061cc:	b99c      	cbnz	r4, 80061f6 <_malloc_r+0x56>
 80061ce:	4f20      	ldr	r7, [pc, #128]	; (8006250 <_malloc_r+0xb0>)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	b923      	cbnz	r3, 80061de <_malloc_r+0x3e>
 80061d4:	4621      	mov	r1, r4
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 f862 	bl	80062a0 <_sbrk_r>
 80061dc:	6038      	str	r0, [r7, #0]
 80061de:	4629      	mov	r1, r5
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f85d 	bl	80062a0 <_sbrk_r>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	d123      	bne.n	8006232 <_malloc_r+0x92>
 80061ea:	230c      	movs	r3, #12
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 f86c 	bl	80062cc <__malloc_unlock>
 80061f4:	e7e3      	b.n	80061be <_malloc_r+0x1e>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	1b5b      	subs	r3, r3, r5
 80061fa:	d417      	bmi.n	800622c <_malloc_r+0x8c>
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d903      	bls.n	8006208 <_malloc_r+0x68>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	441c      	add	r4, r3
 8006204:	6025      	str	r5, [r4, #0]
 8006206:	e004      	b.n	8006212 <_malloc_r+0x72>
 8006208:	6863      	ldr	r3, [r4, #4]
 800620a:	42a2      	cmp	r2, r4
 800620c:	bf0c      	ite	eq
 800620e:	600b      	streq	r3, [r1, #0]
 8006210:	6053      	strne	r3, [r2, #4]
 8006212:	4630      	mov	r0, r6
 8006214:	f000 f85a 	bl	80062cc <__malloc_unlock>
 8006218:	f104 000b 	add.w	r0, r4, #11
 800621c:	1d23      	adds	r3, r4, #4
 800621e:	f020 0007 	bic.w	r0, r0, #7
 8006222:	1ac2      	subs	r2, r0, r3
 8006224:	d0cc      	beq.n	80061c0 <_malloc_r+0x20>
 8006226:	1a1b      	subs	r3, r3, r0
 8006228:	50a3      	str	r3, [r4, r2]
 800622a:	e7c9      	b.n	80061c0 <_malloc_r+0x20>
 800622c:	4622      	mov	r2, r4
 800622e:	6864      	ldr	r4, [r4, #4]
 8006230:	e7cc      	b.n	80061cc <_malloc_r+0x2c>
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d0e3      	beq.n	8006204 <_malloc_r+0x64>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f82e 	bl	80062a0 <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d1dd      	bne.n	8006204 <_malloc_r+0x64>
 8006248:	e7cf      	b.n	80061ea <_malloc_r+0x4a>
 800624a:	bf00      	nop
 800624c:	20004c08 	.word	0x20004c08
 8006250:	20004c0c 	.word	0x20004c0c

08006254 <_realloc_r>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	4607      	mov	r7, r0
 8006258:	4614      	mov	r4, r2
 800625a:	460e      	mov	r6, r1
 800625c:	b921      	cbnz	r1, 8006268 <_realloc_r+0x14>
 800625e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006262:	4611      	mov	r1, r2
 8006264:	f7ff bf9c 	b.w	80061a0 <_malloc_r>
 8006268:	b922      	cbnz	r2, 8006274 <_realloc_r+0x20>
 800626a:	f7ff ff49 	bl	8006100 <_free_r>
 800626e:	4625      	mov	r5, r4
 8006270:	4628      	mov	r0, r5
 8006272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006274:	f000 f830 	bl	80062d8 <_malloc_usable_size_r>
 8006278:	42a0      	cmp	r0, r4
 800627a:	d20f      	bcs.n	800629c <_realloc_r+0x48>
 800627c:	4621      	mov	r1, r4
 800627e:	4638      	mov	r0, r7
 8006280:	f7ff ff8e 	bl	80061a0 <_malloc_r>
 8006284:	4605      	mov	r5, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	d0f2      	beq.n	8006270 <_realloc_r+0x1c>
 800628a:	4631      	mov	r1, r6
 800628c:	4622      	mov	r2, r4
 800628e:	f7ff fbf7 	bl	8005a80 <memcpy>
 8006292:	4631      	mov	r1, r6
 8006294:	4638      	mov	r0, r7
 8006296:	f7ff ff33 	bl	8006100 <_free_r>
 800629a:	e7e9      	b.n	8006270 <_realloc_r+0x1c>
 800629c:	4635      	mov	r5, r6
 800629e:	e7e7      	b.n	8006270 <_realloc_r+0x1c>

080062a0 <_sbrk_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d06      	ldr	r5, [pc, #24]	; (80062bc <_sbrk_r+0x1c>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fa fdc6 	bl	8000e3c <_sbrk>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_sbrk_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_sbrk_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20004cec 	.word	0x20004cec

080062c0 <__malloc_lock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__malloc_lock+0x8>)
 80062c2:	f000 b811 	b.w	80062e8 <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	20004cf4 	.word	0x20004cf4

080062cc <__malloc_unlock>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__malloc_unlock+0x8>)
 80062ce:	f000 b80c 	b.w	80062ea <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	20004cf4 	.word	0x20004cf4

080062d8 <_malloc_usable_size_r>:
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f18      	subs	r0, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfbc      	itt	lt
 80062e2:	580b      	ldrlt	r3, [r1, r0]
 80062e4:	18c0      	addlt	r0, r0, r3
 80062e6:	4770      	bx	lr

080062e8 <__retarget_lock_acquire_recursive>:
 80062e8:	4770      	bx	lr

080062ea <__retarget_lock_release_recursive>:
 80062ea:	4770      	bx	lr

080062ec <_init>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr

080062f8 <_fini>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr
